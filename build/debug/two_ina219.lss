
build/debug/two_ina219.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a40  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08003b50  08003b50  00004b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc4  08003dc4  00005080  2**0
                  CONTENTS
  4 .ARM          00000000  08003dc4  08003dc4  00005080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dc4  08003dc4  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc4  08003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc8  08003dc8  00004dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003dcc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000080  08003e4c  00005080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08003e4c  0000528c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  000050a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc88  00000000  00000000  000050e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000209e  00000000  00000000  00012d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  00014e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b0  00000000  00000000  000158d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2d2  00000000  00000000  00016088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002fd7  00000000  00000000  0002335a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00001c88  00000000  00000000  00026334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00007423  00000000  00000000  00027fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000016b  00000000  00000000  0002f3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__aeabi_fmul>:
 8000110:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000114:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000118:	bf1e      	ittt	ne
 800011a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800011e:	ea92 0f0c 	teqne	r2, ip
 8000122:	ea93 0f0c 	teqne	r3, ip
 8000126:	d06f      	beq.n	8000208 <__aeabi_fmul+0xf8>
 8000128:	441a      	add	r2, r3
 800012a:	ea80 0c01 	eor.w	ip, r0, r1
 800012e:	0240      	lsls	r0, r0, #9
 8000130:	bf18      	it	ne
 8000132:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000136:	d01e      	beq.n	8000176 <__aeabi_fmul+0x66>
 8000138:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800013c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000140:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000144:	fba0 3101 	umull	r3, r1, r0, r1
 8000148:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800014c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000150:	bf3e      	ittt	cc
 8000152:	0049      	lslcc	r1, r1, #1
 8000154:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000158:	005b      	lslcc	r3, r3, #1
 800015a:	ea40 0001 	orr.w	r0, r0, r1
 800015e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000162:	2afd      	cmp	r2, #253	@ 0xfd
 8000164:	d81d      	bhi.n	80001a2 <__aeabi_fmul+0x92>
 8000166:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800016a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800016e:	bf08      	it	eq
 8000170:	f020 0001 	biceq.w	r0, r0, #1
 8000174:	4770      	bx	lr
 8000176:	f090 0f00 	teq	r0, #0
 800017a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800017e:	bf08      	it	eq
 8000180:	0249      	lsleq	r1, r1, #9
 8000182:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000186:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800018a:	3a7f      	subs	r2, #127	@ 0x7f
 800018c:	bfc2      	ittt	gt
 800018e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000192:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000196:	4770      	bxgt	lr
 8000198:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800019c:	f04f 0300 	mov.w	r3, #0
 80001a0:	3a01      	subs	r2, #1
 80001a2:	dc5d      	bgt.n	8000260 <__aeabi_fmul+0x150>
 80001a4:	f112 0f19 	cmn.w	r2, #25
 80001a8:	bfdc      	itt	le
 80001aa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ae:	4770      	bxle	lr
 80001b0:	f1c2 0200 	rsb	r2, r2, #0
 80001b4:	0041      	lsls	r1, r0, #1
 80001b6:	fa21 f102 	lsr.w	r1, r1, r2
 80001ba:	f1c2 0220 	rsb	r2, r2, #32
 80001be:	fa00 fc02 	lsl.w	ip, r0, r2
 80001c2:	ea5f 0031 	movs.w	r0, r1, rrx
 80001c6:	f140 0000 	adc.w	r0, r0, #0
 80001ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80001ce:	bf08      	it	eq
 80001d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80001d4:	4770      	bx	lr
 80001d6:	f092 0f00 	teq	r2, #0
 80001da:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80001de:	bf02      	ittt	eq
 80001e0:	0040      	lsleq	r0, r0, #1
 80001e2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80001e6:	3a01      	subeq	r2, #1
 80001e8:	d0f9      	beq.n	80001de <__aeabi_fmul+0xce>
 80001ea:	ea40 000c 	orr.w	r0, r0, ip
 80001ee:	f093 0f00 	teq	r3, #0
 80001f2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80001f6:	bf02      	ittt	eq
 80001f8:	0049      	lsleq	r1, r1, #1
 80001fa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80001fe:	3b01      	subeq	r3, #1
 8000200:	d0f9      	beq.n	80001f6 <__aeabi_fmul+0xe6>
 8000202:	ea41 010c 	orr.w	r1, r1, ip
 8000206:	e78f      	b.n	8000128 <__aeabi_fmul+0x18>
 8000208:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800020c:	ea92 0f0c 	teq	r2, ip
 8000210:	bf18      	it	ne
 8000212:	ea93 0f0c 	teqne	r3, ip
 8000216:	d00a      	beq.n	800022e <__aeabi_fmul+0x11e>
 8000218:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800021c:	bf18      	it	ne
 800021e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000222:	d1d8      	bne.n	80001d6 <__aeabi_fmul+0xc6>
 8000224:	ea80 0001 	eor.w	r0, r0, r1
 8000228:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800022c:	4770      	bx	lr
 800022e:	f090 0f00 	teq	r0, #0
 8000232:	bf17      	itett	ne
 8000234:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000238:	4608      	moveq	r0, r1
 800023a:	f091 0f00 	teqne	r1, #0
 800023e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000242:	d014      	beq.n	800026e <__aeabi_fmul+0x15e>
 8000244:	ea92 0f0c 	teq	r2, ip
 8000248:	d101      	bne.n	800024e <__aeabi_fmul+0x13e>
 800024a:	0242      	lsls	r2, r0, #9
 800024c:	d10f      	bne.n	800026e <__aeabi_fmul+0x15e>
 800024e:	ea93 0f0c 	teq	r3, ip
 8000252:	d103      	bne.n	800025c <__aeabi_fmul+0x14c>
 8000254:	024b      	lsls	r3, r1, #9
 8000256:	bf18      	it	ne
 8000258:	4608      	movne	r0, r1
 800025a:	d108      	bne.n	800026e <__aeabi_fmul+0x15e>
 800025c:	ea80 0001 	eor.w	r0, r0, r1
 8000260:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000264:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000268:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800026c:	4770      	bx	lr
 800026e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000272:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000276:	4770      	bx	lr

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	@ 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2uiz>:
 8000a14:	004a      	lsls	r2, r1, #1
 8000a16:	d211      	bcs.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a1c:	d211      	bcs.n	8000a42 <__aeabi_d2uiz+0x2e>
 8000a1e:	d50d      	bpl.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d40e      	bmi.n	8000a48 <__aeabi_d2uiz+0x34>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d102      	bne.n	8000a4e <__aeabi_d2uiz+0x3a>
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	4770      	bx	lr
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	4770      	bx	lr

08000a54 <__aeabi_frsub>:
 8000a54:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a58:	e002      	b.n	8000a60 <__addsf3>
 8000a5a:	bf00      	nop

08000a5c <__aeabi_fsub>:
 8000a5c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a60 <__addsf3>:
 8000a60:	0042      	lsls	r2, r0, #1
 8000a62:	bf1f      	itttt	ne
 8000a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a68:	ea92 0f03 	teqne	r2, r3
 8000a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a74:	d06a      	beq.n	8000b4c <__addsf3+0xec>
 8000a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a7e:	bfc1      	itttt	gt
 8000a80:	18d2      	addgt	r2, r2, r3
 8000a82:	4041      	eorgt	r1, r0
 8000a84:	4048      	eorgt	r0, r1
 8000a86:	4041      	eorgt	r1, r0
 8000a88:	bfb8      	it	lt
 8000a8a:	425b      	neglt	r3, r3
 8000a8c:	2b19      	cmp	r3, #25
 8000a8e:	bf88      	it	hi
 8000a90:	4770      	bxhi	lr
 8000a92:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a9a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000aaa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4249      	negne	r1, r1
 8000ab2:	ea92 0f03 	teq	r2, r3
 8000ab6:	d03f      	beq.n	8000b38 <__addsf3+0xd8>
 8000ab8:	f1a2 0201 	sub.w	r2, r2, #1
 8000abc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac0:	eb10 000c 	adds.w	r0, r0, ip
 8000ac4:	f1c3 0320 	rsb	r3, r3, #32
 8000ac8:	fa01 f103 	lsl.w	r1, r1, r3
 8000acc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ad0:	d502      	bpl.n	8000ad8 <__addsf3+0x78>
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000adc:	d313      	bcc.n	8000b06 <__addsf3+0xa6>
 8000ade:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ae2:	d306      	bcc.n	8000af2 <__addsf3+0x92>
 8000ae4:	0840      	lsrs	r0, r0, #1
 8000ae6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aea:	f102 0201 	add.w	r2, r2, #1
 8000aee:	2afe      	cmp	r2, #254	@ 0xfe
 8000af0:	d251      	bcs.n	8000b96 <__addsf3+0x136>
 8000af2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	ea40 0003 	orr.w	r0, r0, r3
 8000b04:	4770      	bx	lr
 8000b06:	0049      	lsls	r1, r1, #1
 8000b08:	eb40 0000 	adc.w	r0, r0, r0
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	bf28      	it	cs
 8000b10:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b14:	d2ed      	bcs.n	8000af2 <__addsf3+0x92>
 8000b16:	fab0 fc80 	clz	ip, r0
 8000b1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b26:	bfaa      	itet	ge
 8000b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b2c:	4252      	neglt	r2, r2
 8000b2e:	4318      	orrge	r0, r3
 8000b30:	bfbc      	itt	lt
 8000b32:	40d0      	lsrlt	r0, r2
 8000b34:	4318      	orrlt	r0, r3
 8000b36:	4770      	bx	lr
 8000b38:	f092 0f00 	teq	r2, #0
 8000b3c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b40:	bf06      	itte	eq
 8000b42:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b46:	3201      	addeq	r2, #1
 8000b48:	3b01      	subne	r3, #1
 8000b4a:	e7b5      	b.n	8000ab8 <__addsf3+0x58>
 8000b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	bf18      	it	ne
 8000b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5a:	d021      	beq.n	8000ba0 <__addsf3+0x140>
 8000b5c:	ea92 0f03 	teq	r2, r3
 8000b60:	d004      	beq.n	8000b6c <__addsf3+0x10c>
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	bf08      	it	eq
 8000b68:	4608      	moveq	r0, r1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea90 0f01 	teq	r0, r1
 8000b70:	bf1c      	itt	ne
 8000b72:	2000      	movne	r0, #0
 8000b74:	4770      	bxne	lr
 8000b76:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b7a:	d104      	bne.n	8000b86 <__addsf3+0x126>
 8000b7c:	0040      	lsls	r0, r0, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b84:	4770      	bx	lr
 8000b86:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b8a:	bf3c      	itt	cc
 8000b8c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b90:	4770      	bxcc	lr
 8000b92:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b96:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	4770      	bx	lr
 8000ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ba4:	bf16      	itet	ne
 8000ba6:	4608      	movne	r0, r1
 8000ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bac:	4601      	movne	r1, r0
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	bf06      	itte	eq
 8000bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bb6:	ea90 0f01 	teqeq	r0, r1
 8000bba:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_ui2f>:
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e004      	b.n	8000bd0 <__aeabi_i2f+0x8>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_i2f>:
 8000bc8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bcc:	bf48      	it	mi
 8000bce:	4240      	negmi	r0, r0
 8000bd0:	ea5f 0c00 	movs.w	ip, r0
 8000bd4:	bf08      	it	eq
 8000bd6:	4770      	bxeq	lr
 8000bd8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000bdc:	4601      	mov	r1, r0
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	e01c      	b.n	8000c1e <__aeabi_l2f+0x2a>

08000be4 <__aeabi_ul2f>:
 8000be4:	ea50 0201 	orrs.w	r2, r0, r1
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e00a      	b.n	8000c08 <__aeabi_l2f+0x14>
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_l2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__aeabi_l2f+0x14>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	ea5f 0c01 	movs.w	ip, r1
 8000c0c:	bf02      	ittt	eq
 8000c0e:	4684      	moveq	ip, r0
 8000c10:	4601      	moveq	r1, r0
 8000c12:	2000      	moveq	r0, #0
 8000c14:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c18:	bf08      	it	eq
 8000c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c22:	fabc f28c 	clz	r2, ip
 8000c26:	3a08      	subs	r2, #8
 8000c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c2c:	db10      	blt.n	8000c50 <__aeabi_l2f+0x5c>
 8000c2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c32:	4463      	add	r3, ip
 8000c34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c40:	fa20 f202 	lsr.w	r2, r0, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f102 0220 	add.w	r2, r2, #32
 8000c54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c60:	fa21 f202 	lsr.w	r2, r1, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_f2iz>:
 8000c70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c74:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c78:	d30f      	bcc.n	8000c9a <__aeabi_f2iz+0x2a>
 8000c7a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c82:	d90d      	bls.n	8000ca0 <__aeabi_f2iz+0x30>
 8000c84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c8c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c90:	fa23 f002 	lsr.w	r0, r3, r2
 8000c94:	bf18      	it	ne
 8000c96:	4240      	negne	r0, r0
 8000c98:	4770      	bx	lr
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	4770      	bx	lr
 8000ca0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ca4:	d101      	bne.n	8000caa <__aeabi_f2iz+0x3a>
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	d105      	bne.n	8000cb6 <__aeabi_f2iz+0x46>
 8000caa:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000cae:	bf08      	it	eq
 8000cb0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cb4:	4770      	bx	lr
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	4770      	bx	lr

08000cbc <__do_global_dtors_aux>:
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	4c05      	ldr	r4, [pc, #20]	@ (8000cd4 <__do_global_dtors_aux+0x18>)
 8000cc0:	7823      	ldrb	r3, [r4, #0]
 8000cc2:	b933      	cbnz	r3, 8000cd2 <__do_global_dtors_aux+0x16>
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <__do_global_dtors_aux+0x1c>)
 8000cc6:	b113      	cbz	r3, 8000cce <__do_global_dtors_aux+0x12>
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <__do_global_dtors_aux+0x20>)
 8000cca:	f3af 8000 	nop.w
 8000cce:	2301      	movs	r3, #1
 8000cd0:	7023      	strb	r3, [r4, #0]
 8000cd2:	bd10      	pop	{r4, pc}
 8000cd4:	20000080 	.word	0x20000080
 8000cd8:	00000000 	.word	0x00000000
 8000cdc:	08003b38 	.word	0x08003b38

08000ce0 <frame_dummy>:
 8000ce0:	b508      	push	{r3, lr}
 8000ce2:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <frame_dummy+0x10>)
 8000ce4:	b11b      	cbz	r3, 8000cee <frame_dummy+0xe>
 8000ce6:	4903      	ldr	r1, [pc, #12]	@ (8000cf4 <frame_dummy+0x14>)
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <frame_dummy+0x18>)
 8000cea:	f3af 8000 	nop.w
 8000cee:	bd08      	pop	{r3, pc}
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	20000084 	.word	0x20000084
 8000cf8:	08003b38 	.word	0x08003b38

08000cfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cfc:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_GPIO_Init+0x40>)
 8000d00:	699a      	ldr	r2, [r3, #24]
 8000d02:	f042 0220 	orr.w	r2, r2, #32
 8000d06:	619a      	str	r2, [r3, #24]
 8000d08:	699a      	ldr	r2, [r3, #24]
 8000d0a:	f002 0220 	and.w	r2, r2, #32
 8000d0e:	9201      	str	r2, [sp, #4]
 8000d10:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	699a      	ldr	r2, [r3, #24]
 8000d14:	f042 0208 	orr.w	r2, r2, #8
 8000d18:	619a      	str	r2, [r3, #24]
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	f002 0208 	and.w	r2, r2, #8
 8000d20:	9202      	str	r2, [sp, #8]
 8000d22:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	f042 0204 	orr.w	r2, r2, #4
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	9303      	str	r3, [sp, #12]
 8000d34:	9b03      	ldr	r3, [sp, #12]

}
 8000d36:	b004      	add	sp, #16
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <MX_I2C1_Init>:
// I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c1;

/* I2C2 init function */
void MX_I2C1_Init(void)
{
 8000d40:	b508      	push	{r3, lr}
  // hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  // if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  // {
  //   Error_Handler();
  // }
  hi2c1.Instance = I2C1;
 8000d42:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <MX_I2C1_Init+0x30>)
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_I2C1_Init+0x34>)
 8000d46:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_I2C1_Init+0x38>)
 8000d4a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d50:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d56:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d5a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d60:	f000 feae 	bl	8001ac0 <HAL_I2C_Init>
 8000d64:	b900      	cbnz	r0, 8000d68 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d66:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d68:	f000 fa3e 	bl	80011e8 <Error_Handler>
}
 8000d6c:	e7fb      	b.n	8000d66 <MX_I2C1_Init+0x26>
 8000d6e:	bf00      	nop
 8000d70:	2000009c 	.word	0x2000009c
 8000d74:	40005400 	.word	0x40005400
 8000d78:	000186a0 	.word	0x000186a0

08000d7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	b086      	sub	sp, #24
  //   __HAL_RCC_I2C2_CLK_ENABLE();
  // /* USER CODE BEGIN I2C2_MspInit 1 */

  // /* USER CODE END I2C2_MspInit 1 */
  // }
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	2300      	movs	r3, #0
 8000d82:	9302      	str	r3, [sp, #8]
 8000d84:	9303      	str	r3, [sp, #12]
 8000d86:	9304      	str	r3, [sp, #16]
 8000d88:	9305      	str	r3, [sp, #20]
  if(i2cHandle->Instance==I2C1)
 8000d8a:	6802      	ldr	r2, [r0, #0]
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_I2C_MspInit+0x68>)
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d92:	b006      	add	sp, #24
 8000d94:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4c14      	ldr	r4, [pc, #80]	@ (8000de8 <HAL_I2C_MspInit+0x6c>)
 8000d98:	69a3      	ldr	r3, [r4, #24]
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	61a3      	str	r3, [r4, #24]
 8000da0:	69a3      	ldr	r3, [r4, #24]
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000daa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	a902      	add	r1, sp, #8
 8000dba:	480c      	ldr	r0, [pc, #48]	@ (8000dec <HAL_I2C_MspInit+0x70>)
 8000dbc:	f000 fb18 	bl	80013f0 <HAL_GPIO_Init>
     __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <HAL_I2C_MspInit+0x74>)
 8000dc2:	6853      	ldr	r3, [r2, #4]
 8000dc4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dce:	69e3      	ldr	r3, [r4, #28]
 8000dd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dd4:	61e3      	str	r3, [r4, #28]
 8000dd6:	69e3      	ldr	r3, [r4, #28]
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	9b01      	ldr	r3, [sp, #4]
}
 8000de0:	e7d7      	b.n	8000d92 <HAL_I2C_MspInit+0x16>
 8000de2:	bf00      	nop
 8000de4:	40005400 	.word	0x40005400
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	40010000 	.word	0x40010000

08000df4 <i2c_read>:
    return true;
  }
  return false;
}

uint16_t i2c_read(INA219_t *sensor, uint8_t reg) {
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	4604      	mov	r4, r0
 8000dfa:	f88d 100f 	strb.w	r1, [sp, #15]
  uint8_t data[2] = {0};
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8ad 3014 	strh.w	r3, [sp, #20]
  // HAL_I2C_Master_Transmit(&hi2c2, sensor->address << 1, &reg, 1, HAL_MAX_DELAY);
  // HAL_I2C_Master_Receive(&hi2c2, sensor->address << 1, data, 2, HAL_MAX_DELAY);
  HAL_I2C_Master_Transmit(&hi2c1, sensor->address << 1, &reg, 1, HAL_MAX_DELAY);
 8000e04:	7801      	ldrb	r1, [r0, #0]
 8000e06:	4d0d      	ldr	r5, [pc, #52]	@ (8000e3c <i2c_read+0x48>)
 8000e08:	f04f 36ff 	mov.w	r6, #4294967295
 8000e0c:	9600      	str	r6, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f10d 020f 	add.w	r2, sp, #15
 8000e14:	4099      	lsls	r1, r3
 8000e16:	4628      	mov	r0, r5
 8000e18:	f000 ff30 	bl	8001c7c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, sensor->address << 1, data, 2, HAL_MAX_DELAY);
 8000e1c:	7821      	ldrb	r1, [r4, #0]
 8000e1e:	9600      	str	r6, [sp, #0]
 8000e20:	2302      	movs	r3, #2
 8000e22:	aa05      	add	r2, sp, #20
 8000e24:	0049      	lsls	r1, r1, #1
 8000e26:	4628      	mov	r0, r5
 8000e28:	f000 ffe2 	bl	8001df0 <HAL_I2C_Master_Receive>
  return (data[0] << 8) | data[1];
 8000e2c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8000e30:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 8000e34:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000e38:	b006      	add	sp, #24
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
 8000e3c:	2000009c 	.word	0x2000009c

08000e40 <ina219_get_bus_voltage>:
{
 8000e40:	b508      	push	{r3, lr}
  uint16_t reg_val = i2c_read(sensor, INA219_REG_BUS_VOLTAGE);
 8000e42:	2102      	movs	r1, #2
 8000e44:	f7ff ffd6 	bl	8000df4 <i2c_read>
  return (reg_val >> 3) * bus_voltage_lsb;
 8000e48:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 8000e4c:	f7ff febc 	bl	8000bc8 <__aeabi_i2f>
 8000e50:	4901      	ldr	r1, [pc, #4]	@ (8000e58 <ina219_get_bus_voltage+0x18>)
 8000e52:	f7ff f95d 	bl	8000110 <__aeabi_fmul>
}
 8000e56:	bd08      	pop	{r3, pc}
 8000e58:	3b83126f 	.word	0x3b83126f

08000e5c <ina219_get_current>:
{
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	4604      	mov	r4, r0
  uint16_t reg_val = i2c_read(sensor, INA219_REG_CURRENT);
 8000e60:	2104      	movs	r1, #4
 8000e62:	f7ff ffc7 	bl	8000df4 <i2c_read>
  return reg_val * sensor->current_lsb;
 8000e66:	6864      	ldr	r4, [r4, #4]
 8000e68:	f7ff feae 	bl	8000bc8 <__aeabi_i2f>
 8000e6c:	4621      	mov	r1, r4
 8000e6e:	f7ff f94f 	bl	8000110 <__aeabi_fmul>
}
 8000e72:	bd10      	pop	{r4, pc}

08000e74 <ina219_get_shunt_voltage>:
{
 8000e74:	b508      	push	{r3, lr}
  uint16_t reg_val = i2c_read(sensor, INA219_REG_SHUNT_VOLTAGE);
 8000e76:	2101      	movs	r1, #1
 8000e78:	f7ff ffbc 	bl	8000df4 <i2c_read>
  return reg_val * shunt_voltage_lsb;
 8000e7c:	f7ff fea4 	bl	8000bc8 <__aeabi_i2f>
 8000e80:	4901      	ldr	r1, [pc, #4]	@ (8000e88 <ina219_get_shunt_voltage+0x14>)
 8000e82:	f7ff f945 	bl	8000110 <__aeabi_fmul>
}
 8000e86:	bd08      	pop	{r3, pc}
 8000e88:	3727c5ac 	.word	0x3727c5ac

08000e8c <ina219_get_power>:
{
 8000e8c:	b510      	push	{r4, lr}
 8000e8e:	4604      	mov	r4, r0
  uint16_t reg_val = i2c_read(sensor, INA219_REG_POWER);
 8000e90:	2103      	movs	r1, #3
 8000e92:	f7ff ffaf 	bl	8000df4 <i2c_read>
  return reg_val * 20 * sensor->current_lsb;
 8000e96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000e9a:	6864      	ldr	r4, [r4, #4]
 8000e9c:	0080      	lsls	r0, r0, #2
 8000e9e:	f7ff fe93 	bl	8000bc8 <__aeabi_i2f>
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	f7ff f934 	bl	8000110 <__aeabi_fmul>
}
 8000ea8:	bd10      	pop	{r4, pc}

08000eaa <ina219_get_status>:
{
 8000eaa:	b510      	push	{r4, lr}
 8000eac:	4604      	mov	r4, r0
  if(i2c_read(sensor, INA219_REG_CONFIGURATION) == sensor->config_val)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f7ff ffa0 	bl	8000df4 <i2c_read>
 8000eb4:	8923      	ldrh	r3, [r4, #8]
 8000eb6:	4298      	cmp	r0, r3
 8000eb8:	d001      	beq.n	8000ebe <ina219_get_status+0x14>
  return false;
 8000eba:	2000      	movs	r0, #0
}
 8000ebc:	bd10      	pop	{r4, pc}
    return true;
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	e7fc      	b.n	8000ebc <ina219_get_status+0x12>
	...

08000ec4 <i2c_write>:

bool i2c_write(INA219_t *sensor, const uint8_t reg, const uint16_t val){
 8000ec4:	b500      	push	{lr}
 8000ec6:	b085      	sub	sp, #20
  uint8_t data[3] = {reg, (uint8_t)(val >> 8), (uint8_t)(val & 0xFF)};
 8000ec8:	f88d 100c 	strb.w	r1, [sp, #12]
 8000ecc:	0a13      	lsrs	r3, r2, #8
 8000ece:	f88d 300d 	strb.w	r3, [sp, #13]
 8000ed2:	f88d 200e 	strb.w	r2, [sp, #14]
  // if (HAL_I2C_Master_Transmit(&hi2c2, sensor->address << 1, data, 3, HAL_MAX_DELAY) == HAL_OK)
  // {
  //   return true;
  // }
  // return false;
  if (HAL_I2C_Master_Transmit(&hi2c1, sensor->address << 1, data, 3, HAL_MAX_DELAY) == HAL_OK)
 8000ed6:	7801      	ldrb	r1, [r0, #0]
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2303      	movs	r3, #3
 8000ee0:	aa03      	add	r2, sp, #12
 8000ee2:	0049      	lsls	r1, r1, #1
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <i2c_write+0x34>)
 8000ee6:	f000 fec9 	bl	8001c7c <HAL_I2C_Master_Transmit>
 8000eea:	b118      	cbz	r0, 8000ef4 <i2c_write+0x30>
  {
    return true;
  }
  return false;
 8000eec:	2000      	movs	r0, #0
 8000eee:	b005      	add	sp, #20
 8000ef0:	f85d fb04 	ldr.w	pc, [sp], #4
    return true;
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	e7fa      	b.n	8000eee <i2c_write+0x2a>
 8000ef8:	2000009c 	.word	0x2000009c

08000efc <ina219_reset>:
{
 8000efc:	b510      	push	{r4, lr}
 8000efe:	4604      	mov	r4, r0
  if(i2c_write(sensor, INA219_REG_CONFIGURATION, 0x8000)){
 8000f00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f04:	2100      	movs	r1, #0
 8000f06:	f7ff ffdd 	bl	8000ec4 <i2c_write>
 8000f0a:	b178      	cbz	r0, 8000f2c <ina219_reset+0x30>
    printf("INA219 reset successful!\n");
 8000f0c:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <ina219_reset+0x48>)
 8000f0e:	f001 ffad 	bl	8002e6c <puts>
  if (i2c_read(sensor, INA219_REG_CONFIGURATION) == 0x399F)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4620      	mov	r0, r4
 8000f16:	f7ff ff6d 	bl	8000df4 <i2c_read>
 8000f1a:	f643 139f 	movw	r3, #14751	@ 0x399f
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	d008      	beq.n	8000f34 <ina219_reset+0x38>
    printf("INA219 reset failed!\n");
 8000f22:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <ina219_reset+0x4c>)
 8000f24:	f001 ffa2 	bl	8002e6c <puts>
    return false;
 8000f28:	2000      	movs	r0, #0
}
 8000f2a:	bd10      	pop	{r4, pc}
    printf("INA219 reset failed!\n");
 8000f2c:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <ina219_reset+0x4c>)
 8000f2e:	f001 ff9d 	bl	8002e6c <puts>
 8000f32:	e7ee      	b.n	8000f12 <ina219_reset+0x16>
    sensor->config_val = 0x399F;
 8000f34:	8123      	strh	r3, [r4, #8]
    sensor->current_lsb = 0.0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	6063      	str	r3, [r4, #4]
    printf("INA219 reset successful!\n");
 8000f3a:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <ina219_reset+0x48>)
 8000f3c:	f001 ff96 	bl	8002e6c <puts>
    return true;
 8000f40:	2001      	movs	r0, #1
 8000f42:	e7f2      	b.n	8000f2a <ina219_reset+0x2e>
 8000f44:	08003b50 	.word	0x08003b50
 8000f48:	08003b6c 	.word	0x08003b6c

08000f4c <ina219_init>:
{
 8000f4c:	b508      	push	{r3, lr}
  if(ina219_reset(sensor))
 8000f4e:	f7ff ffd5 	bl	8000efc <ina219_reset>
}
 8000f52:	bd08      	pop	{r3, pc}
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <ina219_calibrate>:
{
 8000f58:	b570      	push	{r4, r5, r6, lr}
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	4614      	mov	r4, r2
  float temp_current_lsb = max_current * 3.0517578125e-5;
 8000f60:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 8000f64:	f7ff f8d4 	bl	8000110 <__aeabi_fmul>
 8000f68:	4606      	mov	r6, r0
  const uint16_t calibration_val = (uint16_t)(0.04096 / (temp_current_lsb * r_shunt));
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	f7ff f8d0 	bl	8000110 <__aeabi_fmul>
 8000f70:	f7ff fae6 	bl	8000540 <__aeabi_f2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	a10d      	add	r1, pc, #52	@ (adr r1, 8000fb0 <ina219_calibrate+0x58>)
 8000f7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f7e:	f7ff fc61 	bl	8000844 <__aeabi_ddiv>
 8000f82:	f7ff fd47 	bl	8000a14 <__aeabi_d2uiz>
 8000f86:	b284      	uxth	r4, r0
  i2c_write(sensor, INA219_REG_CALIBRATION, calibration_val);
 8000f88:	4622      	mov	r2, r4
 8000f8a:	2105      	movs	r1, #5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	f7ff ff99 	bl	8000ec4 <i2c_write>
  if(i2c_read(sensor, INA219_REG_CALIBRATION) == (calibration_val & 0xFFFE))
 8000f92:	2105      	movs	r1, #5
 8000f94:	4628      	mov	r0, r5
 8000f96:	f7ff ff2d 	bl	8000df4 <i2c_read>
 8000f9a:	f024 0401 	bic.w	r4, r4, #1
 8000f9e:	4284      	cmp	r4, r0
 8000fa0:	d001      	beq.n	8000fa6 <ina219_calibrate+0x4e>
  return false;
 8000fa2:	2000      	movs	r0, #0
}
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
    sensor->current_lsb = temp_current_lsb;
 8000fa6:	606e      	str	r6, [r5, #4]
    return true;
 8000fa8:	2001      	movs	r0, #1
 8000faa:	e7fb      	b.n	8000fa4 <ina219_calibrate+0x4c>
 8000fac:	f3af 8000 	nop.w
 8000fb0:	88e368f1 	.word	0x88e368f1
 8000fb4:	3fa4f8b5 	.word	0x3fa4f8b5

08000fb8 <ina219_configure>:
{
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4605      	mov	r5, r0
 8000fbc:	460c      	mov	r4, r1
  i2c_write(sensor, INA219_REG_CONFIGURATION, val);
 8000fbe:	460a      	mov	r2, r1
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f7ff ff7f 	bl	8000ec4 <i2c_write>
  if(i2c_read(sensor, INA219_REG_CONFIGURATION) == val)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f7ff ff13 	bl	8000df4 <i2c_read>
 8000fce:	42a0      	cmp	r0, r4
 8000fd0:	d001      	beq.n	8000fd6 <ina219_configure+0x1e>
  return false;
 8000fd2:	2000      	movs	r0, #0
}
 8000fd4:	bd38      	pop	{r3, r4, r5, pc}
    sensor->config_val = val;
 8000fd6:	812c      	strh	r4, [r5, #8]
    return true;
 8000fd8:	2001      	movs	r0, #1
 8000fda:	e7fb      	b.n	8000fd4 <ina219_configure+0x1c>

08000fdc <_write>:
INA219_t system = { .address = 0x41 };
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *data, int len){
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	b292      	uxth	r2, r2
 8000fe6:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <_write+0x14>)
 8000fe8:	f001 fcdd 	bl	80029a6 <HAL_UART_Transmit>
  return len;
}
 8000fec:	4620      	mov	r0, r4
 8000fee:	bd10      	pop	{r4, pc}
 8000ff0:	200000f8 	.word	0x200000f8

08000ff4 <main_setup>:
// }


/* USER CODE BEGIN 4 */
void main_setup (void)
{
 8000ff4:	b508      	push	{r3, lr}
  printf("Namaste!\n");
 8000ff6:	481c      	ldr	r0, [pc, #112]	@ (8001068 <main_setup+0x74>)
 8000ff8:	f001 ff38 	bl	8002e6c <puts>
  if (!ina219_init(&battery) || !ina219_init(&system))
 8000ffc:	481b      	ldr	r0, [pc, #108]	@ (800106c <main_setup+0x78>)
 8000ffe:	f7ff ffa5 	bl	8000f4c <ina219_init>
 8001002:	b118      	cbz	r0, 800100c <main_setup+0x18>
 8001004:	481a      	ldr	r0, [pc, #104]	@ (8001070 <main_setup+0x7c>)
 8001006:	f7ff ffa1 	bl	8000f4c <ina219_init>
 800100a:	b918      	cbnz	r0, 8001014 <main_setup+0x20>
  {
    printf("INA219 init failed!\n");
 800100c:	4819      	ldr	r0, [pc, #100]	@ (8001074 <main_setup+0x80>)
 800100e:	f001 ff2d 	bl	8002e6c <puts>
    while(1);
 8001012:	e7fe      	b.n	8001012 <main_setup+0x1e>
  }
  else
  {
    printf("INA219 init successful!\n");
 8001014:	4818      	ldr	r0, [pc, #96]	@ (8001078 <main_setup+0x84>)
 8001016:	f001 ff29 	bl	8002e6c <puts>
  }
  const float max_current = 2.5;
  const float r_shunt = 0.1;
  if (!ina219_calibrate(&battery, max_current, r_shunt) || !ina219_calibrate(&system, max_current, r_shunt))
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <main_setup+0x88>)
 800101c:	4918      	ldr	r1, [pc, #96]	@ (8001080 <main_setup+0x8c>)
 800101e:	4813      	ldr	r0, [pc, #76]	@ (800106c <main_setup+0x78>)
 8001020:	f7ff ff9a 	bl	8000f58 <ina219_calibrate>
 8001024:	b128      	cbz	r0, 8001032 <main_setup+0x3e>
 8001026:	4a15      	ldr	r2, [pc, #84]	@ (800107c <main_setup+0x88>)
 8001028:	4915      	ldr	r1, [pc, #84]	@ (8001080 <main_setup+0x8c>)
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <main_setup+0x7c>)
 800102c:	f7ff ff94 	bl	8000f58 <ina219_calibrate>
 8001030:	b918      	cbnz	r0, 800103a <main_setup+0x46>
  {
    printf("INA219 calibration failed!\n");
 8001032:	4814      	ldr	r0, [pc, #80]	@ (8001084 <main_setup+0x90>)
 8001034:	f001 ff1a 	bl	8002e6c <puts>
    while(1);
 8001038:	e7fe      	b.n	8001038 <main_setup+0x44>
  }
  else
  {
    printf("INA219 calibration successful!\n");
 800103a:	4813      	ldr	r0, [pc, #76]	@ (8001088 <main_setup+0x94>)
 800103c:	f001 ff16 	bl	8002e6c <puts>
  }

  const uint16_t config_val = 0x199F;

  if (!ina219_configure(&battery, config_val) || !ina219_configure(&system, config_val))
 8001040:	f641 119f 	movw	r1, #6559	@ 0x199f
 8001044:	4809      	ldr	r0, [pc, #36]	@ (800106c <main_setup+0x78>)
 8001046:	f7ff ffb7 	bl	8000fb8 <ina219_configure>
 800104a:	b128      	cbz	r0, 8001058 <main_setup+0x64>
 800104c:	f641 119f 	movw	r1, #6559	@ 0x199f
 8001050:	4807      	ldr	r0, [pc, #28]	@ (8001070 <main_setup+0x7c>)
 8001052:	f7ff ffb1 	bl	8000fb8 <ina219_configure>
 8001056:	b918      	cbnz	r0, 8001060 <main_setup+0x6c>
  {
    printf("INA219 configuration failed!\n");
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <main_setup+0x98>)
 800105a:	f001 ff07 	bl	8002e6c <puts>
    while(1);
 800105e:	e7fe      	b.n	800105e <main_setup+0x6a>
  }
  else
  {
    printf("INA219 configuration successful!\n");
 8001060:	480b      	ldr	r0, [pc, #44]	@ (8001090 <main_setup+0x9c>)
 8001062:	f001 ff03 	bl	8002e6c <puts>
  }
}
 8001066:	bd08      	pop	{r3, pc}
 8001068:	08003b84 	.word	0x08003b84
 800106c:	2000000c 	.word	0x2000000c
 8001070:	20000000 	.word	0x20000000
 8001074:	08003b90 	.word	0x08003b90
 8001078:	08003ba4 	.word	0x08003ba4
 800107c:	3dcccccd 	.word	0x3dcccccd
 8001080:	40200000 	.word	0x40200000
 8001084:	08003bbc 	.word	0x08003bbc
 8001088:	08003bd8 	.word	0x08003bd8
 800108c:	08003bf8 	.word	0x08003bf8
 8001090:	08003c18 	.word	0x08003c18

08001094 <main_loop>:

void main_loop (void)
{
 8001094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!ina219_get_status(&battery))
 8001098:	4844      	ldr	r0, [pc, #272]	@ (80011ac <main_loop+0x118>)
 800109a:	f7ff ff06 	bl	8000eaa <ina219_get_status>
 800109e:	b918      	cbnz	r0, 80010a8 <main_loop+0x14>
  {
    printf("Battery Sensor Error!\n");
 80010a0:	4843      	ldr	r0, [pc, #268]	@ (80011b0 <main_loop+0x11c>)
 80010a2:	f001 fee3 	bl	8002e6c <puts>
    while(1);
 80010a6:	e7fe      	b.n	80010a6 <main_loop+0x12>
  }

  float bus_voltage_bat = ina219_get_bus_voltage(&battery);
 80010a8:	4c40      	ldr	r4, [pc, #256]	@ (80011ac <main_loop+0x118>)
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff fec8 	bl	8000e40 <ina219_get_bus_voltage>
 80010b0:	4607      	mov	r7, r0
  float shunt_voltage_bat = ina219_get_shunt_voltage(&battery);
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fede 	bl	8000e74 <ina219_get_shunt_voltage>
 80010b8:	4606      	mov	r6, r0
  float current_bat = ina219_get_current(&battery);
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff fece 	bl	8000e5c <ina219_get_current>
 80010c0:	4605      	mov	r5, r0
  float power_bat = ina219_get_power(&battery);
 80010c2:	4620      	mov	r0, r4
 80010c4:	f7ff fee2 	bl	8000e8c <ina219_get_power>
 80010c8:	4604      	mov	r4, r0

  if (!ina219_get_status(&system))
 80010ca:	483a      	ldr	r0, [pc, #232]	@ (80011b4 <main_loop+0x120>)
 80010cc:	f7ff feed 	bl	8000eaa <ina219_get_status>
 80010d0:	b918      	cbnz	r0, 80010da <main_loop+0x46>
  {
    printf("System Sensor Error!\n");
 80010d2:	4839      	ldr	r0, [pc, #228]	@ (80011b8 <main_loop+0x124>)
 80010d4:	f001 feca 	bl	8002e6c <puts>
    while(1);
 80010d8:	e7fe      	b.n	80010d8 <main_loop+0x44>
  }

  float bus_voltage_sys = ina219_get_bus_voltage(&system);
 80010da:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 80011b4 <main_loop+0x120>
 80010de:	4640      	mov	r0, r8
 80010e0:	f7ff feae 	bl	8000e40 <ina219_get_bus_voltage>
 80010e4:	4683      	mov	fp, r0
  float shunt_voltage_sys = ina219_get_shunt_voltage(&system);
 80010e6:	4640      	mov	r0, r8
 80010e8:	f7ff fec4 	bl	8000e74 <ina219_get_shunt_voltage>
 80010ec:	4682      	mov	sl, r0
  float current_sys = ina219_get_current(&system);
 80010ee:	4640      	mov	r0, r8
 80010f0:	f7ff feb4 	bl	8000e5c <ina219_get_current>
 80010f4:	4681      	mov	r9, r0
  float power_sys = ina219_get_power(&system);
 80010f6:	4640      	mov	r0, r8
 80010f8:	f7ff fec8 	bl	8000e8c <ina219_get_power>
 80010fc:	4680      	mov	r8, r0


  printf("BATTERY SENSOR\n");
 80010fe:	482f      	ldr	r0, [pc, #188]	@ (80011bc <main_loop+0x128>)
 8001100:	f001 feb4 	bl	8002e6c <puts>
  printf("Battery Bus Voltage: %d mV\n", (int)(bus_voltage_bat*1000));
 8001104:	492e      	ldr	r1, [pc, #184]	@ (80011c0 <main_loop+0x12c>)
 8001106:	4638      	mov	r0, r7
 8001108:	f7ff f802 	bl	8000110 <__aeabi_fmul>
 800110c:	f7ff fdb0 	bl	8000c70 <__aeabi_f2iz>
 8001110:	4601      	mov	r1, r0
 8001112:	482c      	ldr	r0, [pc, #176]	@ (80011c4 <main_loop+0x130>)
 8001114:	f001 fe42 	bl	8002d9c <iprintf>
  printf("Battery Shunt Voltage: %d mV\n", (int)(shunt_voltage_bat*1000));
 8001118:	4929      	ldr	r1, [pc, #164]	@ (80011c0 <main_loop+0x12c>)
 800111a:	4630      	mov	r0, r6
 800111c:	f7fe fff8 	bl	8000110 <__aeabi_fmul>
 8001120:	f7ff fda6 	bl	8000c70 <__aeabi_f2iz>
 8001124:	4601      	mov	r1, r0
 8001126:	4828      	ldr	r0, [pc, #160]	@ (80011c8 <main_loop+0x134>)
 8001128:	f001 fe38 	bl	8002d9c <iprintf>
  printf("Battery Current: %d mA\n", (int)(current_bat*1000));
 800112c:	4924      	ldr	r1, [pc, #144]	@ (80011c0 <main_loop+0x12c>)
 800112e:	4628      	mov	r0, r5
 8001130:	f7fe ffee 	bl	8000110 <__aeabi_fmul>
 8001134:	f7ff fd9c 	bl	8000c70 <__aeabi_f2iz>
 8001138:	4601      	mov	r1, r0
 800113a:	4824      	ldr	r0, [pc, #144]	@ (80011cc <main_loop+0x138>)
 800113c:	f001 fe2e 	bl	8002d9c <iprintf>
  printf("Battery Power: %d W\n\n", (int)(power_bat));
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff fd95 	bl	8000c70 <__aeabi_f2iz>
 8001146:	4601      	mov	r1, r0
 8001148:	4821      	ldr	r0, [pc, #132]	@ (80011d0 <main_loop+0x13c>)
 800114a:	f001 fe27 	bl	8002d9c <iprintf>

  
  printf("SYSTEM SENSOR\n");
 800114e:	4821      	ldr	r0, [pc, #132]	@ (80011d4 <main_loop+0x140>)
 8001150:	f001 fe8c 	bl	8002e6c <puts>
  printf("System Bus Voltage: %d mV\n", (int)(bus_voltage_sys*1000));
 8001154:	491a      	ldr	r1, [pc, #104]	@ (80011c0 <main_loop+0x12c>)
 8001156:	4658      	mov	r0, fp
 8001158:	f7fe ffda 	bl	8000110 <__aeabi_fmul>
 800115c:	f7ff fd88 	bl	8000c70 <__aeabi_f2iz>
 8001160:	4601      	mov	r1, r0
 8001162:	481d      	ldr	r0, [pc, #116]	@ (80011d8 <main_loop+0x144>)
 8001164:	f001 fe1a 	bl	8002d9c <iprintf>
  printf("System Shunt Voltage: %d mV\n", (int)(shunt_voltage_sys*1000));
 8001168:	4915      	ldr	r1, [pc, #84]	@ (80011c0 <main_loop+0x12c>)
 800116a:	4650      	mov	r0, sl
 800116c:	f7fe ffd0 	bl	8000110 <__aeabi_fmul>
 8001170:	f7ff fd7e 	bl	8000c70 <__aeabi_f2iz>
 8001174:	4601      	mov	r1, r0
 8001176:	4819      	ldr	r0, [pc, #100]	@ (80011dc <main_loop+0x148>)
 8001178:	f001 fe10 	bl	8002d9c <iprintf>
  printf("System Current: %d mA\n", (int)(current_sys*1000));
 800117c:	4910      	ldr	r1, [pc, #64]	@ (80011c0 <main_loop+0x12c>)
 800117e:	4648      	mov	r0, r9
 8001180:	f7fe ffc6 	bl	8000110 <__aeabi_fmul>
 8001184:	f7ff fd74 	bl	8000c70 <__aeabi_f2iz>
 8001188:	4601      	mov	r1, r0
 800118a:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <main_loop+0x14c>)
 800118c:	f001 fe06 	bl	8002d9c <iprintf>
  printf("System Power: %d W\n\n", (int)(power_sys));
 8001190:	4640      	mov	r0, r8
 8001192:	f7ff fd6d 	bl	8000c70 <__aeabi_f2iz>
 8001196:	4601      	mov	r1, r0
 8001198:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <main_loop+0x150>)
 800119a:	f001 fdff 	bl	8002d9c <iprintf>

  HAL_Delay(1000); // Delay for readability
 800119e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a2:	f000 f8a7 	bl	80012f4 <HAL_Delay>
}
 80011a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011aa:	bf00      	nop
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	08003c3c 	.word	0x08003c3c
 80011b4:	20000000 	.word	0x20000000
 80011b8:	08003c54 	.word	0x08003c54
 80011bc:	08003c6c 	.word	0x08003c6c
 80011c0:	447a0000 	.word	0x447a0000
 80011c4:	08003c7c 	.word	0x08003c7c
 80011c8:	08003c98 	.word	0x08003c98
 80011cc:	08003cb8 	.word	0x08003cb8
 80011d0:	08003cd0 	.word	0x08003cd0
 80011d4:	08003ce8 	.word	0x08003ce8
 80011d8:	08003cf8 	.word	0x08003cf8
 80011dc:	08003d14 	.word	0x08003d14
 80011e0:	08003d34 	.word	0x08003d34
 80011e4:	08003d4c 	.word	0x08003d4c

080011e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ea:	e7fe      	b.n	80011ea <Error_Handler+0x2>

080011ec <SystemClock_Config>:
{
 80011ec:	b510      	push	{r4, lr}
 80011ee:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f0:	ac06      	add	r4, sp, #24
 80011f2:	2228      	movs	r2, #40	@ 0x28
 80011f4:	2100      	movs	r1, #0
 80011f6:	4620      	mov	r0, r4
 80011f8:	f001 ff16 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	9303      	str	r3, [sp, #12]
 8001204:	9304      	str	r3, [sp, #16]
 8001206:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001208:	2301      	movs	r3, #1
 800120a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800120c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001210:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	4620      	mov	r0, r4
 8001214:	f000 ffce 	bl	80021b4 <HAL_RCC_OscConfig>
 8001218:	b968      	cbnz	r0, 8001236 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	230f      	movs	r3, #15
 800121c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800121e:	2301      	movs	r3, #1
 8001220:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001222:	2100      	movs	r1, #0
 8001224:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001226:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001228:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800122a:	a801      	add	r0, sp, #4
 800122c:	f001 f9f4 	bl	8002618 <HAL_RCC_ClockConfig>
 8001230:	b918      	cbnz	r0, 800123a <SystemClock_Config+0x4e>
}
 8001232:	b010      	add	sp, #64	@ 0x40
 8001234:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001236:	f7ff ffd7 	bl	80011e8 <Error_Handler>
    Error_Handler();
 800123a:	f7ff ffd5 	bl	80011e8 <Error_Handler>

0800123e <main>:
{
 800123e:	b508      	push	{r3, lr}
  HAL_Init();
 8001240:	f000 f834 	bl	80012ac <HAL_Init>
  SystemClock_Config();
 8001244:	f7ff ffd2 	bl	80011ec <SystemClock_Config>
  MX_GPIO_Init();
 8001248:	f7ff fd58 	bl	8000cfc <MX_GPIO_Init>
  MX_I2C1_Init();
 800124c:	f7ff fd78 	bl	8000d40 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001250:	f001 fc5c 	bl	8002b0c <MX_USART1_UART_Init>
main_setup();
 8001254:	f7ff fece 	bl	8000ff4 <main_setup>
    main_loop();
 8001258:	f7ff ff1c 	bl	8001094 <main_loop>
  while (1)
 800125c:	e7fc      	b.n	8001258 <main+0x1a>
	...

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b510      	push	{r4, lr}
 8001262:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_InitTick+0x40>)
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001270:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <HAL_InitTick+0x44>)
 8001272:	6810      	ldr	r0, [r2, #0]
 8001274:	fbb0 f0f3 	udiv	r0, r0, r3
 8001278:	f000 f8a6 	bl	80013c8 <HAL_SYSTICK_Config>
 800127c:	b968      	cbnz	r0, 800129a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	2c0f      	cmp	r4, #15
 8001280:	d901      	bls.n	8001286 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
 8001284:	e00a      	b.n	800129c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001286:	2200      	movs	r2, #0
 8001288:	4621      	mov	r1, r4
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	f000 f88b 	bl	80013a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_InitTick+0x48>)
 8001294:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2000      	movs	r0, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800129a:	2001      	movs	r0, #1
}
 800129c:	bd10      	pop	{r4, pc}
 800129e:	bf00      	nop
 80012a0:	20000018 	.word	0x20000018
 80012a4:	20000020 	.word	0x20000020
 80012a8:	2000001c 	.word	0x2000001c

080012ac <HAL_Init>:
{
 80012ac:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ae:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <HAL_Init+0x20>)
 80012b0:	6813      	ldr	r3, [r2, #0]
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 f863 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	200f      	movs	r0, #15
 80012c0:	f7ff ffce 	bl	8001260 <HAL_InitTick>
  HAL_MspInit();
 80012c4:	f000 ff3e 	bl	8002144 <HAL_MspInit>
}
 80012c8:	2000      	movs	r0, #0
 80012ca:	bd08      	pop	{r3, pc}
 80012cc:	40022000 	.word	0x40022000

080012d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012d0:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <HAL_IncTick+0x10>)
 80012d2:	6811      	ldr	r1, [r2, #0]
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <HAL_IncTick+0x14>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	440b      	add	r3, r1
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	200000f0 	.word	0x200000f0
 80012e4:	20000018 	.word	0x20000018

080012e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012e8:	4b01      	ldr	r3, [pc, #4]	@ (80012f0 <HAL_GetTick+0x8>)
 80012ea:	6818      	ldr	r0, [r3, #0]
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200000f0 	.word	0x200000f0

080012f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f4:	b538      	push	{r3, r4, r5, lr}
 80012f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff fff6 	bl	80012e8 <HAL_GetTick>
 80012fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001302:	d002      	beq.n	800130a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001304:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <HAL_Delay+0x24>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130a:	f7ff ffed 	bl	80012e8 <HAL_GetTick>
 800130e:	1b40      	subs	r0, r0, r5
 8001310:	42a0      	cmp	r0, r4
 8001312:	d3fa      	bcc.n	800130a <HAL_Delay+0x16>
  {
  }
}
 8001314:	bd38      	pop	{r3, r4, r5, pc}
 8001316:	bf00      	nop
 8001318:	20000018 	.word	0x20000018

0800131c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800131c:	2800      	cmp	r0, #0
 800131e:	db08      	blt.n	8001332 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	0109      	lsls	r1, r1, #4
 8001322:	b2c9      	uxtb	r1, r1
 8001324:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001328:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800132c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001330:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	f000 000f 	and.w	r0, r0, #15
 8001336:	0109      	lsls	r1, r1, #4
 8001338:	b2c9      	uxtb	r1, r1
 800133a:	4b01      	ldr	r3, [pc, #4]	@ (8001340 <__NVIC_SetPriority+0x24>)
 800133c:	5419      	strb	r1, [r3, r0]
  }
}
 800133e:	4770      	bx	lr
 8001340:	e000ed14 	.word	0xe000ed14

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001346:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134a:	f1c0 0c07 	rsb	ip, r0, #7
 800134e:	f1bc 0f04 	cmp.w	ip, #4
 8001352:	bf28      	it	cs
 8001354:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001358:	1d03      	adds	r3, r0, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d90f      	bls.n	800137e <NVIC_EncodePriority+0x3a>
 800135e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 3eff 	mov.w	lr, #4294967295
 8001364:	fa0e f00c 	lsl.w	r0, lr, ip
 8001368:	ea21 0100 	bic.w	r1, r1, r0
 800136c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001372:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001376:	ea41 0002 	orr.w	r0, r1, r2
 800137a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	2300      	movs	r3, #0
 8001380:	e7ee      	b.n	8001360 <NVIC_EncodePriority+0x1c>
	...

08001384 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001386:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001388:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001390:	0200      	lsls	r0, r0, #8
 8001392:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001396:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80013a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a8:	b510      	push	{r4, lr}
 80013aa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_NVIC_SetPriority+0x1c>)
 80013ae:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80013b4:	f7ff ffc6 	bl	8001344 <NVIC_EncodePriority>
 80013b8:	4601      	mov	r1, r0
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff ffae 	bl	800131c <__NVIC_SetPriority>
}
 80013c0:	bd10      	pop	{r4, pc}
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	3801      	subs	r0, #1
 80013ca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80013ce:	d20b      	bcs.n	80013e8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80013d4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <HAL_SYSTICK_Config+0x24>)
 80013d8:	21f0      	movs	r1, #240	@ 0xf0
 80013da:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013de:	2000      	movs	r0, #0
 80013e0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	2207      	movs	r2, #7
 80013e4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013e8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80013f6:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f8:	e09e      	b.n	8001538 <HAL_GPIO_Init+0x148>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013fa:	4d7c      	ldr	r5, [pc, #496]	@ (80015ec <HAL_GPIO_Init+0x1fc>)
 80013fc:	42ab      	cmp	r3, r5
 80013fe:	d014      	beq.n	800142a <HAL_GPIO_Init+0x3a>
 8001400:	d80c      	bhi.n	800141c <HAL_GPIO_Init+0x2c>
 8001402:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001406:	42ab      	cmp	r3, r5
 8001408:	d00f      	beq.n	800142a <HAL_GPIO_Init+0x3a>
 800140a:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 800140e:	42ab      	cmp	r3, r5
 8001410:	d00b      	beq.n	800142a <HAL_GPIO_Init+0x3a>
 8001412:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001416:	42ab      	cmp	r3, r5
 8001418:	d11f      	bne.n	800145a <HAL_GPIO_Init+0x6a>
 800141a:	e006      	b.n	800142a <HAL_GPIO_Init+0x3a>
 800141c:	4d74      	ldr	r5, [pc, #464]	@ (80015f0 <HAL_GPIO_Init+0x200>)
 800141e:	42ab      	cmp	r3, r5
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x3a>
 8001422:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8001426:	42ab      	cmp	r3, r5
 8001428:	d117      	bne.n	800145a <HAL_GPIO_Init+0x6a>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142a:	688b      	ldr	r3, [r1, #8]
 800142c:	b1a3      	cbz	r3, 8001458 <HAL_GPIO_Init+0x68>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800142e:	2b01      	cmp	r3, #1
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x5e>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001432:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2408      	movs	r4, #8
 8001436:	e010      	b.n	800145a <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001438:	68cc      	ldr	r4, [r1, #12]
          break;
 800143a:	e00e      	b.n	800145a <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800143c:	68cc      	ldr	r4, [r1, #12]
 800143e:	3404      	adds	r4, #4
          break;
 8001440:	e00b      	b.n	800145a <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001442:	68cc      	ldr	r4, [r1, #12]
 8001444:	3408      	adds	r4, #8
          break;
 8001446:	e008      	b.n	800145a <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001448:	68cc      	ldr	r4, [r1, #12]
 800144a:	340c      	adds	r4, #12
          break;
 800144c:	e005      	b.n	800145a <HAL_GPIO_Init+0x6a>
            GPIOx->BSRR = ioposition;
 800144e:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001450:	2408      	movs	r4, #8
 8001452:	e002      	b.n	800145a <HAL_GPIO_Init+0x6a>
          }
          break;

        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001454:	2400      	movs	r4, #0
 8001456:	e000      	b.n	800145a <HAL_GPIO_Init+0x6a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001458:	2404      	movs	r4, #4
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800145a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800145e:	d837      	bhi.n	80014d0 <HAL_GPIO_Init+0xe0>
 8001460:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001462:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001466:	6833      	ldr	r3, [r6, #0]
 8001468:	250f      	movs	r5, #15
 800146a:	4095      	lsls	r5, r2
 800146c:	ea23 0305 	bic.w	r3, r3, r5
 8001470:	fa04 f202 	lsl.w	r2, r4, r2
 8001474:	4313      	orrs	r3, r2
 8001476:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001478:	684b      	ldr	r3, [r1, #4]
 800147a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800147e:	d059      	beq.n	8001534 <HAL_GPIO_Init+0x144>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001480:	4b5c      	ldr	r3, [pc, #368]	@ (80015f4 <HAL_GPIO_Init+0x204>)
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	f042 0201 	orr.w	r2, r2, #1
 8001488:	619a      	str	r2, [r3, #24]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001494:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001498:	1c95      	adds	r5, r2, #2
 800149a:	4b57      	ldr	r3, [pc, #348]	@ (80015f8 <HAL_GPIO_Init+0x208>)
 800149c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014a0:	f00c 0503 	and.w	r5, ip, #3
 80014a4:	00ad      	lsls	r5, r5, #2
 80014a6:	230f      	movs	r3, #15
 80014a8:	40ab      	lsls	r3, r5
 80014aa:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014ae:	4b53      	ldr	r3, [pc, #332]	@ (80015fc <HAL_GPIO_Init+0x20c>)
 80014b0:	4298      	cmp	r0, r3
 80014b2:	d014      	beq.n	80014de <HAL_GPIO_Init+0xee>
 80014b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014b8:	4298      	cmp	r0, r3
 80014ba:	d079      	beq.n	80015b0 <HAL_GPIO_Init+0x1c0>
 80014bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014c0:	4298      	cmp	r0, r3
 80014c2:	d077      	beq.n	80015b4 <HAL_GPIO_Init+0x1c4>
 80014c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014c8:	4298      	cmp	r0, r3
 80014ca:	d006      	beq.n	80014da <HAL_GPIO_Init+0xea>
 80014cc:	2304      	movs	r3, #4
 80014ce:	e007      	b.n	80014e0 <HAL_GPIO_Init+0xf0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d0:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014d2:	f1ac 0208 	sub.w	r2, ip, #8
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	e7c5      	b.n	8001466 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014da:	2303      	movs	r3, #3
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0xf0>
 80014de:	2300      	movs	r3, #0
 80014e0:	40ab      	lsls	r3, r5
 80014e2:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80014e4:	3202      	adds	r2, #2
 80014e6:	4d44      	ldr	r5, [pc, #272]	@ (80015f8 <HAL_GPIO_Init+0x208>)
 80014e8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ec:	684b      	ldr	r3, [r1, #4]
 80014ee:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80014f2:	d061      	beq.n	80015b8 <HAL_GPIO_Init+0x1c8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f4:	4a42      	ldr	r2, [pc, #264]	@ (8001600 <HAL_GPIO_Init+0x210>)
 80014f6:	6893      	ldr	r3, [r2, #8]
 80014f8:	ea43 030e 	orr.w	r3, r3, lr
 80014fc:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fe:	684b      	ldr	r3, [r1, #4]
 8001500:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001504:	d05e      	beq.n	80015c4 <HAL_GPIO_Init+0x1d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001506:	4a3e      	ldr	r2, [pc, #248]	@ (8001600 <HAL_GPIO_Init+0x210>)
 8001508:	68d3      	ldr	r3, [r2, #12]
 800150a:	ea43 030e 	orr.w	r3, r3, lr
 800150e:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001510:	684b      	ldr	r3, [r1, #4]
 8001512:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001516:	d05b      	beq.n	80015d0 <HAL_GPIO_Init+0x1e0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001518:	4a39      	ldr	r2, [pc, #228]	@ (8001600 <HAL_GPIO_Init+0x210>)
 800151a:	6853      	ldr	r3, [r2, #4]
 800151c:	ea43 030e 	orr.w	r3, r3, lr
 8001520:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001522:	684b      	ldr	r3, [r1, #4]
 8001524:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001528:	d058      	beq.n	80015dc <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800152a:	4a35      	ldr	r2, [pc, #212]	@ (8001600 <HAL_GPIO_Init+0x210>)
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	ea43 030e 	orr.w	r3, r3, lr
 8001532:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001534:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001538:	680b      	ldr	r3, [r1, #0]
 800153a:	fa33 f20c 	lsrs.w	r2, r3, ip
 800153e:	d053      	beq.n	80015e8 <HAL_GPIO_Init+0x1f8>
    ioposition = (0x01uL << position);
 8001540:	2201      	movs	r2, #1
 8001542:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001546:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 800154a:	ea32 0303 	bics.w	r3, r2, r3
 800154e:	d1f1      	bne.n	8001534 <HAL_GPIO_Init+0x144>
      switch (GPIO_Init->Mode)
 8001550:	684b      	ldr	r3, [r1, #4]
 8001552:	2b12      	cmp	r3, #18
 8001554:	f63f af51 	bhi.w	80013fa <HAL_GPIO_Init+0xa>
 8001558:	2b12      	cmp	r3, #18
 800155a:	f63f af7e 	bhi.w	800145a <HAL_GPIO_Init+0x6a>
 800155e:	a501      	add	r5, pc, #4	@ (adr r5, 8001564 <HAL_GPIO_Init+0x174>)
 8001560:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001564:	0800142b 	.word	0x0800142b
 8001568:	08001439 	.word	0x08001439
 800156c:	08001443 	.word	0x08001443
 8001570:	08001455 	.word	0x08001455
 8001574:	0800145b 	.word	0x0800145b
 8001578:	0800145b 	.word	0x0800145b
 800157c:	0800145b 	.word	0x0800145b
 8001580:	0800145b 	.word	0x0800145b
 8001584:	0800145b 	.word	0x0800145b
 8001588:	0800145b 	.word	0x0800145b
 800158c:	0800145b 	.word	0x0800145b
 8001590:	0800145b 	.word	0x0800145b
 8001594:	0800145b 	.word	0x0800145b
 8001598:	0800145b 	.word	0x0800145b
 800159c:	0800145b 	.word	0x0800145b
 80015a0:	0800145b 	.word	0x0800145b
 80015a4:	0800145b 	.word	0x0800145b
 80015a8:	0800143d 	.word	0x0800143d
 80015ac:	08001449 	.word	0x08001449
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b0:	2301      	movs	r3, #1
 80015b2:	e795      	b.n	80014e0 <HAL_GPIO_Init+0xf0>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e793      	b.n	80014e0 <HAL_GPIO_Init+0xf0>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015b8:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <HAL_GPIO_Init+0x210>)
 80015ba:	6893      	ldr	r3, [r2, #8]
 80015bc:	ea23 030e 	bic.w	r3, r3, lr
 80015c0:	6093      	str	r3, [r2, #8]
 80015c2:	e79c      	b.n	80014fe <HAL_GPIO_Init+0x10e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001600 <HAL_GPIO_Init+0x210>)
 80015c6:	68d3      	ldr	r3, [r2, #12]
 80015c8:	ea23 030e 	bic.w	r3, r3, lr
 80015cc:	60d3      	str	r3, [r2, #12]
 80015ce:	e79f      	b.n	8001510 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001600 <HAL_GPIO_Init+0x210>)
 80015d2:	6853      	ldr	r3, [r2, #4]
 80015d4:	ea23 030e 	bic.w	r3, r3, lr
 80015d8:	6053      	str	r3, [r2, #4]
 80015da:	e7a2      	b.n	8001522 <HAL_GPIO_Init+0x132>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015dc:	4a08      	ldr	r2, [pc, #32]	@ (8001600 <HAL_GPIO_Init+0x210>)
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	ea23 030e 	bic.w	r3, r3, lr
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e7a5      	b.n	8001534 <HAL_GPIO_Init+0x144>
  }
}
 80015e8:	b002      	add	sp, #8
 80015ea:	bd70      	pop	{r4, r5, r6, pc}
 80015ec:	10220000 	.word	0x10220000
 80015f0:	10310000 	.word	0x10310000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010000 	.word	0x40010000
 80015fc:	40010800 	.word	0x40010800
 8001600:	40010400 	.word	0x40010400

08001604 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001604:	6803      	ldr	r3, [r0, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800160c:	d101      	bne.n	8001612 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800160e:	2000      	movs	r0, #0
}
 8001610:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001612:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001616:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001618:	2300      	movs	r3, #0
 800161a:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800161c:	2220      	movs	r2, #32
 800161e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001622:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001626:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001628:	f042 0204 	orr.w	r2, r2, #4
 800162c:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 800162e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001632:	2001      	movs	r0, #1
 8001634:	4770      	bx	lr

08001636 <I2C_WaitOnFlagUntilTimeout>:
{
 8001636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800163a:	4606      	mov	r6, r0
 800163c:	460c      	mov	r4, r1
 800163e:	4617      	mov	r7, r2
 8001640:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001642:	e03b      	b.n	80016bc <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001644:	f7ff fe50 	bl	80012e8 <HAL_GetTick>
 8001648:	9b06      	ldr	r3, [sp, #24]
 800164a:	1ac0      	subs	r0, r0, r3
 800164c:	4540      	cmp	r0, r8
 800164e:	d802      	bhi.n	8001656 <I2C_WaitOnFlagUntilTimeout+0x20>
 8001650:	f1b8 0f00 	cmp.w	r8, #0
 8001654:	d132      	bne.n	80016bc <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001656:	2d01      	cmp	r5, #1
 8001658:	d018      	beq.n	800168c <I2C_WaitOnFlagUntilTimeout+0x56>
 800165a:	6833      	ldr	r3, [r6, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	ea24 0303 	bic.w	r3, r4, r3
 8001662:	b29b      	uxth	r3, r3
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	095b      	lsrs	r3, r3, #5
 800166a:	429f      	cmp	r7, r3
 800166c:	d126      	bne.n	80016bc <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800166e:	2300      	movs	r3, #0
 8001670:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001672:	2220      	movs	r2, #32
 8001674:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001678:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800167c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800167e:	f042 0220 	orr.w	r2, r2, #32
 8001682:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001684:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001688:	2001      	movs	r0, #1
 800168a:	e027      	b.n	80016dc <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800168c:	6833      	ldr	r3, [r6, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	ea24 0303 	bic.w	r3, r4, r3
 8001694:	b29b      	uxth	r3, r3
 8001696:	fab3 f383 	clz	r3, r3
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	e7e5      	b.n	800166a <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800169e:	6833      	ldr	r3, [r6, #0]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	ea24 0c03 	bic.w	ip, r4, r3
 80016a6:	fa1f fc8c 	uxth.w	ip, ip
 80016aa:	fabc fc8c 	clz	ip, ip
 80016ae:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80016b2:	4567      	cmp	r7, ip
 80016b4:	d111      	bne.n	80016da <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 80016b6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80016ba:	d1c3      	bne.n	8001644 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016bc:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80016c0:	2d01      	cmp	r5, #1
 80016c2:	d0ec      	beq.n	800169e <I2C_WaitOnFlagUntilTimeout+0x68>
 80016c4:	6833      	ldr	r3, [r6, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	ea24 0c03 	bic.w	ip, r4, r3
 80016cc:	fa1f fc8c 	uxth.w	ip, ip
 80016d0:	fabc fc8c 	clz	ip, ip
 80016d4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80016d8:	e7eb      	b.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80016da:	2000      	movs	r0, #0
}
 80016dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80016e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016e4:	4605      	mov	r5, r0
 80016e6:	460e      	mov	r6, r1
 80016e8:	4690      	mov	r8, r2
 80016ea:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016ec:	e053      	b.n	8001796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f6:	682b      	ldr	r3, [r5, #0]
 80016f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80016fc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80016fe:	2300      	movs	r3, #0
 8001700:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001702:	2220      	movs	r2, #32
 8001704:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001708:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800170c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800170e:	f042 0204 	orr.w	r2, r2, #4
 8001712:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001714:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001718:	2001      	movs	r0, #1
 800171a:	e04a      	b.n	80017b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171c:	f7ff fde4 	bl	80012e8 <HAL_GetTick>
 8001720:	eba0 0009 	sub.w	r0, r0, r9
 8001724:	4540      	cmp	r0, r8
 8001726:	d802      	bhi.n	800172e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8001728:	f1b8 0f00 	cmp.w	r8, #0
 800172c:	d133      	bne.n	8001796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800172e:	2f01      	cmp	r7, #1
 8001730:	d017      	beq.n	8001762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	ea26 0303 	bic.w	r3, r6, r3
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b00      	subs	r3, #0
 800173e:	bf18      	it	ne
 8001740:	2301      	movne	r3, #1
 8001742:	b343      	cbz	r3, 8001796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001744:	2300      	movs	r3, #0
 8001746:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001748:	2220      	movs	r2, #32
 800174a:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800174e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001752:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001754:	f042 0220 	orr.w	r2, r2, #32
 8001758:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800175a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 800175e:	2001      	movs	r0, #1
 8001760:	e027      	b.n	80017b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001762:	682b      	ldr	r3, [r5, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	ea26 0303 	bic.w	r3, r6, r3
 800176a:	b29b      	uxth	r3, r3
 800176c:	3b00      	subs	r3, #0
 800176e:	bf18      	it	ne
 8001770:	2301      	movne	r3, #1
 8001772:	e7e6      	b.n	8001742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	699c      	ldr	r4, [r3, #24]
 8001778:	ea26 0404 	bic.w	r4, r6, r4
 800177c:	b2a4      	uxth	r4, r4
 800177e:	3c00      	subs	r4, #0
 8001780:	bf18      	it	ne
 8001782:	2401      	movne	r4, #1
 8001784:	b1a4      	cbz	r4, 80017b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800178e:	d1ae      	bne.n	80016ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001790:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001794:	d1c2      	bne.n	800171c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001796:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800179a:	2f01      	cmp	r7, #1
 800179c:	d1ea      	bne.n	8001774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 800179e:	682b      	ldr	r3, [r5, #0]
 80017a0:	695c      	ldr	r4, [r3, #20]
 80017a2:	ea26 0404 	bic.w	r4, r6, r4
 80017a6:	b2a4      	uxth	r4, r4
 80017a8:	3c00      	subs	r4, #0
 80017aa:	bf18      	it	ne
 80017ac:	2401      	movne	r4, #1
 80017ae:	e7e9      	b.n	8001784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 80017b0:	2000      	movs	r0, #0
}
 80017b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080017b8 <I2C_MasterRequestWrite>:
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	4616      	mov	r6, r2
 80017c2:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017c4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d00d      	beq.n	80017e6 <I2C_MasterRequestWrite+0x2e>
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d00b      	beq.n	80017e6 <I2C_MasterRequestWrite+0x2e>
 80017ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80017d2:	d008      	beq.n	80017e6 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d10a      	bne.n	80017f0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017da:	6802      	ldr	r2, [r0, #0]
 80017dc:	6813      	ldr	r3, [r2, #0]
 80017de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e004      	b.n	80017f0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017e6:	6822      	ldr	r2, [r4, #0]
 80017e8:	6813      	ldr	r3, [r2, #0]
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017f0:	9700      	str	r7, [sp, #0]
 80017f2:	4633      	mov	r3, r6
 80017f4:	2200      	movs	r2, #0
 80017f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff ff1b 	bl	8001636 <I2C_WaitOnFlagUntilTimeout>
 8001800:	b980      	cbnz	r0, 8001824 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001802:	6923      	ldr	r3, [r4, #16]
 8001804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001808:	d116      	bne.n	8001838 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001810:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4632      	mov	r2, r6
 8001816:	4913      	ldr	r1, [pc, #76]	@ (8001864 <I2C_MasterRequestWrite+0xac>)
 8001818:	4620      	mov	r0, r4
 800181a:	f7ff ff61 	bl	80016e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800181e:	b9f8      	cbnz	r0, 8001860 <I2C_MasterRequestWrite+0xa8>
}
 8001820:	b003      	add	sp, #12
 8001822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800182c:	d002      	beq.n	8001834 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800182e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001832:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001834:	2003      	movs	r0, #3
 8001836:	e7f3      	b.n	8001820 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001838:	11eb      	asrs	r3, r5, #7
 800183a:	6822      	ldr	r2, [r4, #0]
 800183c:	f003 0306 	and.w	r3, r3, #6
 8001840:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001844:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001846:	463b      	mov	r3, r7
 8001848:	4632      	mov	r2, r6
 800184a:	4907      	ldr	r1, [pc, #28]	@ (8001868 <I2C_MasterRequestWrite+0xb0>)
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff ff47 	bl	80016e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001852:	b918      	cbnz	r0, 800185c <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	b2ed      	uxtb	r5, r5
 8001858:	611d      	str	r5, [r3, #16]
 800185a:	e7da      	b.n	8001812 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 800185c:	2001      	movs	r0, #1
 800185e:	e7df      	b.n	8001820 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8001860:	2001      	movs	r0, #1
 8001862:	e7dd      	b.n	8001820 <I2C_MasterRequestWrite+0x68>
 8001864:	00010002 	.word	0x00010002
 8001868:	00010008 	.word	0x00010008

0800186c <I2C_MasterRequestRead>:
{
 800186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
 8001876:	4616      	mov	r6, r2
 8001878:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800187a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800187c:	6801      	ldr	r1, [r0, #0]
 800187e:	680b      	ldr	r3, [r1, #0]
 8001880:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001884:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001886:	2a08      	cmp	r2, #8
 8001888:	d00d      	beq.n	80018a6 <I2C_MasterRequestRead+0x3a>
 800188a:	2a01      	cmp	r2, #1
 800188c:	d00b      	beq.n	80018a6 <I2C_MasterRequestRead+0x3a>
 800188e:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8001892:	d008      	beq.n	80018a6 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001894:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001896:	2b11      	cmp	r3, #17
 8001898:	d10a      	bne.n	80018b0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189a:	6802      	ldr	r2, [r0, #0]
 800189c:	6813      	ldr	r3, [r2, #0]
 800189e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e004      	b.n	80018b0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a6:	6822      	ldr	r2, [r4, #0]
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ae:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b0:	9700      	str	r7, [sp, #0]
 80018b2:	4633      	mov	r3, r6
 80018b4:	2200      	movs	r2, #0
 80018b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff febb 	bl	8001636 <I2C_WaitOnFlagUntilTimeout>
 80018c0:	b998      	cbnz	r0, 80018ea <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018c2:	6923      	ldr	r3, [r4, #16]
 80018c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018c8:	d119      	bne.n	80018fe <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	f045 0501 	orr.w	r5, r5, #1
 80018d0:	b2ed      	uxtb	r5, r5
 80018d2:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	4632      	mov	r2, r6
 80018d8:	492a      	ldr	r1, [pc, #168]	@ (8001984 <I2C_MasterRequestRead+0x118>)
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff ff00 	bl	80016e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d14c      	bne.n	800197e <I2C_MasterRequestRead+0x112>
}
 80018e4:	b004      	add	sp, #16
 80018e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80018f2:	d002      	beq.n	80018fa <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f8:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80018fa:	2003      	movs	r0, #3
 80018fc:	e7f2      	b.n	80018e4 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018fe:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001902:	f008 0806 	and.w	r8, r8, #6
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	f048 02f0 	orr.w	r2, r8, #240	@ 0xf0
 800190c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800190e:	463b      	mov	r3, r7
 8001910:	4632      	mov	r2, r6
 8001912:	491d      	ldr	r1, [pc, #116]	@ (8001988 <I2C_MasterRequestRead+0x11c>)
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff fee3 	bl	80016e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191a:	b108      	cbz	r0, 8001920 <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
 800191e:	e7e1      	b.n	80018e4 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	b2ed      	uxtb	r5, r5
 8001924:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001926:	463b      	mov	r3, r7
 8001928:	4632      	mov	r2, r6
 800192a:	4916      	ldr	r1, [pc, #88]	@ (8001984 <I2C_MasterRequestRead+0x118>)
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff fed7 	bl	80016e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001932:	b108      	cbz	r0, 8001938 <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
 8001936:	e7d5      	b.n	80018e4 <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001938:	2200      	movs	r2, #0
 800193a:	9203      	str	r2, [sp, #12]
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	6959      	ldr	r1, [r3, #20]
 8001940:	9103      	str	r1, [sp, #12]
 8001942:	6999      	ldr	r1, [r3, #24]
 8001944:	9103      	str	r1, [sp, #12]
 8001946:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800194e:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001950:	9700      	str	r7, [sp, #0]
 8001952:	4633      	mov	r3, r6
 8001954:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff fe6c 	bl	8001636 <I2C_WaitOnFlagUntilTimeout>
 800195e:	b920      	cbnz	r0, 800196a <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 8001966:	6113      	str	r3, [r2, #16]
 8001968:	e7b4      	b.n	80018d4 <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001972:	d002      	beq.n	800197a <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001974:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001978:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_TIMEOUT;
 800197a:	2003      	movs	r0, #3
 800197c:	e7b2      	b.n	80018e4 <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 800197e:	2001      	movs	r0, #1
 8001980:	e7b0      	b.n	80018e4 <I2C_MasterRequestRead+0x78>
 8001982:	bf00      	nop
 8001984:	00010002 	.word	0x00010002
 8001988:	00010008 	.word	0x00010008

0800198c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	4604      	mov	r4, r0
 8001990:	460d      	mov	r5, r1
 8001992:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800199c:	d121      	bne.n	80019e2 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff fe30 	bl	8001604 <I2C_IsAcknowledgeFailed>
 80019a4:	b9f8      	cbnz	r0, 80019e6 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80019a6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80019aa:	d0f3      	beq.n	8001994 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ac:	f7ff fc9c 	bl	80012e8 <HAL_GetTick>
 80019b0:	1b80      	subs	r0, r0, r6
 80019b2:	42a8      	cmp	r0, r5
 80019b4:	d801      	bhi.n	80019ba <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80019b6:	2d00      	cmp	r5, #0
 80019b8:	d1ec      	bne.n	8001994 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80019c2:	d1e7      	bne.n	8001994 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019c8:	2220      	movs	r2, #32
 80019ca:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019d2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80019d4:	f042 0220 	orr.w	r2, r2, #32
 80019d8:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80019da:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80019de:	2001      	movs	r0, #1
 80019e0:	e000      	b.n	80019e4 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80019e2:	2000      	movs	r0, #0
}
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80019e6:	2001      	movs	r0, #1
 80019e8:	e7fc      	b.n	80019e4 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080019ea <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80019ea:	b570      	push	{r4, r5, r6, lr}
 80019ec:	4604      	mov	r4, r0
 80019ee:	460d      	mov	r5, r1
 80019f0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f013 0f04 	tst.w	r3, #4
 80019fa:	d121      	bne.n	8001a40 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff fe01 	bl	8001604 <I2C_IsAcknowledgeFailed>
 8001a02:	b9f8      	cbnz	r0, 8001a44 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001a04:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001a08:	d0f3      	beq.n	80019f2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0a:	f7ff fc6d 	bl	80012e8 <HAL_GetTick>
 8001a0e:	1b80      	subs	r0, r0, r6
 8001a10:	42a8      	cmp	r0, r5
 8001a12:	d801      	bhi.n	8001a18 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001a14:	2d00      	cmp	r5, #0
 8001a16:	d1ec      	bne.n	80019f2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f013 0f04 	tst.w	r3, #4
 8001a20:	d1e7      	bne.n	80019f2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a26:	2220      	movs	r2, #32
 8001a28:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a2c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a30:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001a32:	f042 0220 	orr.w	r2, r2, #32
 8001a36:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001a38:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	e000      	b.n	8001a42 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8001a40:	2000      	movs	r0, #0
}
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001a44:	2001      	movs	r0, #1
 8001a46:	e7fc      	b.n	8001a42 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08001a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a50:	e014      	b.n	8001a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a52:	f06f 0210 	mvn.w	r2, #16
 8001a56:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001a66:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001a68:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001a6a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8001a6e:	2001      	movs	r0, #1
 8001a70:	e025      	b.n	8001abe <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001a7a:	d010      	beq.n	8001a9e <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	6958      	ldr	r0, [r3, #20]
 8001a80:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8001a84:	d11a      	bne.n	8001abc <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a86:	6958      	ldr	r0, [r3, #20]
 8001a88:	f010 0f10 	tst.w	r0, #16
 8001a8c:	d1e1      	bne.n	8001a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8e:	f7ff fc2b 	bl	80012e8 <HAL_GetTick>
 8001a92:	1b80      	subs	r0, r0, r6
 8001a94:	42a8      	cmp	r0, r5
 8001a96:	d8ec      	bhi.n	8001a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8001a98:	2d00      	cmp	r5, #0
 8001a9a:	d1ef      	bne.n	8001a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8001a9c:	e7e9      	b.n	8001a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001ab4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8001ab8:	2001      	movs	r0, #1
 8001aba:	e000      	b.n	8001abe <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 8001abc:	2000      	movs	r0, #0
}
 8001abe:	bd70      	pop	{r4, r5, r6, pc}

08001ac0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	f000 80cc 	beq.w	8001c5e <HAL_I2C_Init+0x19e>
{
 8001ac6:	b570      	push	{r4, r5, r6, lr}
 8001ac8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d077      	beq.n	8001bc2 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad2:	2324      	movs	r3, #36	@ 0x24
 8001ad4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	6813      	ldr	r3, [r2, #0]
 8001ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aea:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aec:	6822      	ldr	r2, [r4, #0]
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001af4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af6:	f000 fe4b 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001afa:	6862      	ldr	r2, [r4, #4]
 8001afc:	4b5a      	ldr	r3, [pc, #360]	@ (8001c68 <HAL_I2C_Init+0x1a8>)
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d864      	bhi.n	8001bcc <HAL_I2C_Init+0x10c>
 8001b02:	4b5a      	ldr	r3, [pc, #360]	@ (8001c6c <HAL_I2C_Init+0x1ac>)
 8001b04:	4298      	cmp	r0, r3
 8001b06:	bf8c      	ite	hi
 8001b08:	2300      	movhi	r3, #0
 8001b0a:	2301      	movls	r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 80a8 	bne.w	8001c62 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001b12:	4957      	ldr	r1, [pc, #348]	@ (8001c70 <HAL_I2C_Init+0x1b0>)
 8001b14:	fba1 3100 	umull	r3, r1, r1, r0
 8001b18:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b1a:	6825      	ldr	r5, [r4, #0]
 8001b1c:	686a      	ldr	r2, [r5, #4]
 8001b1e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001b22:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001b26:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b28:	6821      	ldr	r1, [r4, #0]
 8001b2a:	6a0a      	ldr	r2, [r1, #32]
 8001b2c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001b30:	6866      	ldr	r6, [r4, #4]
 8001b32:	4d4d      	ldr	r5, [pc, #308]	@ (8001c68 <HAL_I2C_Init+0x1a8>)
 8001b34:	42ae      	cmp	r6, r5
 8001b36:	d84f      	bhi.n	8001bd8 <HAL_I2C_Init+0x118>
 8001b38:	3301      	adds	r3, #1
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b3e:	6821      	ldr	r1, [r4, #0]
 8001b40:	69ca      	ldr	r2, [r1, #28]
 8001b42:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8001b46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b4a:	6865      	ldr	r5, [r4, #4]
 8001b4c:	4b46      	ldr	r3, [pc, #280]	@ (8001c68 <HAL_I2C_Init+0x1a8>)
 8001b4e:	429d      	cmp	r5, r3
 8001b50:	d84c      	bhi.n	8001bec <HAL_I2C_Init+0x12c>
 8001b52:	1e43      	subs	r3, r0, #1
 8001b54:	006d      	lsls	r5, r5, #1
 8001b56:	fbb3 f3f5 	udiv	r3, r3, r5
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001b60:	4203      	tst	r3, r0
 8001b62:	d078      	beq.n	8001c56 <HAL_I2C_Init+0x196>
 8001b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b6c:	6821      	ldr	r1, [r4, #0]
 8001b6e:	680b      	ldr	r3, [r1, #0]
 8001b70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001b74:	69e2      	ldr	r2, [r4, #28]
 8001b76:	6a20      	ldr	r0, [r4, #32]
 8001b78:	4302      	orrs	r2, r0
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b7e:	6821      	ldr	r1, [r4, #0]
 8001b80:	688b      	ldr	r3, [r1, #8]
 8001b82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b8a:	6922      	ldr	r2, [r4, #16]
 8001b8c:	68e0      	ldr	r0, [r4, #12]
 8001b8e:	4302      	orrs	r2, r0
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b94:	6821      	ldr	r1, [r4, #0]
 8001b96:	68cb      	ldr	r3, [r1, #12]
 8001b98:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b9c:	6962      	ldr	r2, [r4, #20]
 8001b9e:	69a0      	ldr	r0, [r4, #24]
 8001ba0:	4302      	orrs	r2, r0
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001ba6:	6822      	ldr	r2, [r4, #0]
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bba:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001bc2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001bc6:	f7ff f8d9 	bl	8000d7c <HAL_I2C_MspInit>
 8001bca:	e782      	b.n	8001ad2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bcc:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <HAL_I2C_Init+0x1b4>)
 8001bce:	4298      	cmp	r0, r3
 8001bd0:	bf8c      	ite	hi
 8001bd2:	2300      	movhi	r3, #0
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	e799      	b.n	8001b0c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bd8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001bdc:	fb05 f303 	mul.w	r3, r5, r3
 8001be0:	4d25      	ldr	r5, [pc, #148]	@ (8001c78 <HAL_I2C_Init+0x1b8>)
 8001be2:	fba5 5303 	umull	r5, r3, r5, r3
 8001be6:	099b      	lsrs	r3, r3, #6
 8001be8:	3301      	adds	r3, #1
 8001bea:	e7a6      	b.n	8001b3a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bec:	68a6      	ldr	r6, [r4, #8]
 8001bee:	b9be      	cbnz	r6, 8001c20 <HAL_I2C_Init+0x160>
 8001bf0:	1e43      	subs	r3, r0, #1
 8001bf2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001bf6:	fbb3 f3fc 	udiv	r3, r3, ip
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	bb43      	cbnz	r3, 8001c5a <HAL_I2C_Init+0x19a>
 8001c08:	b9c6      	cbnz	r6, 8001c3c <HAL_I2C_Init+0x17c>
 8001c0a:	1e43      	subs	r3, r0, #1
 8001c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c10:	fbb3 f3f5 	udiv	r3, r3, r5
 8001c14:	3301      	adds	r3, #1
 8001c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c1e:	e7a3      	b.n	8001b68 <HAL_I2C_Init+0xa8>
 8001c20:	1e43      	subs	r3, r0, #1
 8001c22:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001c26:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001c2a:	fbb3 f3fc 	udiv	r3, r3, ip
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	e7e4      	b.n	8001c06 <HAL_I2C_Init+0x146>
 8001c3c:	1e43      	subs	r3, r0, #1
 8001c3e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001c42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001c46:	fbb3 f3f5 	udiv	r3, r3, r5
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c54:	e788      	b.n	8001b68 <HAL_I2C_Init+0xa8>
 8001c56:	2304      	movs	r3, #4
 8001c58:	e786      	b.n	8001b68 <HAL_I2C_Init+0xa8>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e784      	b.n	8001b68 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
}
 8001c60:	4770      	bx	lr
    return HAL_ERROR;
 8001c62:	2001      	movs	r0, #1
 8001c64:	e7ac      	b.n	8001bc0 <HAL_I2C_Init+0x100>
 8001c66:	bf00      	nop
 8001c68:	000186a0 	.word	0x000186a0
 8001c6c:	001e847f 	.word	0x001e847f
 8001c70:	431bde83 	.word	0x431bde83
 8001c74:	003d08ff 	.word	0x003d08ff
 8001c78:	10624dd3 	.word	0x10624dd3

08001c7c <HAL_I2C_Master_Transmit>:
{
 8001c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c80:	b085      	sub	sp, #20
 8001c82:	4604      	mov	r4, r0
 8001c84:	460f      	mov	r7, r1
 8001c86:	4690      	mov	r8, r2
 8001c88:	4699      	mov	r9, r3
 8001c8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff fb2c 	bl	80012e8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c90:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8001c94:	2920      	cmp	r1, #32
 8001c96:	d004      	beq.n	8001ca2 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8001c98:	2702      	movs	r7, #2
}
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	b005      	add	sp, #20
 8001c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ca2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca4:	9000      	str	r0, [sp, #0]
 8001ca6:	2319      	movs	r3, #25
 8001ca8:	2201      	movs	r2, #1
 8001caa:	494f      	ldr	r1, [pc, #316]	@ (8001de8 <HAL_I2C_Master_Transmit+0x16c>)
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff fcc2 	bl	8001636 <I2C_WaitOnFlagUntilTimeout>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	f040 8092 	bne.w	8001ddc <HAL_I2C_Master_Transmit+0x160>
    __HAL_LOCK(hi2c);
 8001cb8:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	f000 808f 	beq.w	8001de0 <HAL_I2C_Master_Transmit+0x164>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f012 0f01 	tst.w	r2, #1
 8001cd0:	d103      	bne.n	8001cda <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cda:	6822      	ldr	r2, [r4, #0]
 8001cdc:	6813      	ldr	r3, [r2, #0]
 8001cde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ce2:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ce4:	2321      	movs	r3, #33	@ 0x21
 8001ce6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cea:	2310      	movs	r3, #16
 8001cec:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001cf4:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cf8:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cfc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001cfe:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d00:	4b3a      	ldr	r3, [pc, #232]	@ (8001dec <HAL_I2C_Master_Transmit+0x170>)
 8001d02:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d04:	462b      	mov	r3, r5
 8001d06:	4632      	mov	r2, r6
 8001d08:	4639      	mov	r1, r7
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7ff fd54 	bl	80017b8 <I2C_MasterRequestWrite>
 8001d10:	4607      	mov	r7, r0
 8001d12:	2800      	cmp	r0, #0
 8001d14:	d166      	bne.n	8001de4 <HAL_I2C_Master_Transmit+0x168>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d16:	2300      	movs	r3, #0
 8001d18:	9303      	str	r3, [sp, #12]
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	9203      	str	r2, [sp, #12]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	9303      	str	r3, [sp, #12]
 8001d24:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001d26:	e011      	b.n	8001d4c <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Master_Transmit+0xb6>
        return HAL_ERROR;
 8001d2e:	2701      	movs	r7, #1
 8001d30:	e7b3      	b.n	8001c9a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	6813      	ldr	r3, [r2, #0]
 8001d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e7f7      	b.n	8001d2e <HAL_I2C_Master_Transmit+0xb2>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3e:	462a      	mov	r2, r5
 8001d40:	4631      	mov	r1, r6
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff fe51 	bl	80019ea <I2C_WaitOnBTFFlagUntilTimeout>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d12e      	bne.n	8001daa <HAL_I2C_Master_Transmit+0x12e>
    while (hi2c->XferSize > 0U)
 8001d4c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_I2C_Master_Transmit+0x144>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d52:	462a      	mov	r2, r5
 8001d54:	4631      	mov	r1, r6
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7ff fe18 	bl	800198c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d1e3      	bne.n	8001d28 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d60:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d68:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001d6a:	1c43      	adds	r3, r0, #1
 8001d6c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001d6e:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8001d70:	b289      	uxth	r1, r1
 8001d72:	3901      	subs	r1, #1
 8001d74:	b289      	uxth	r1, r1
 8001d76:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d78:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d80:	6822      	ldr	r2, [r4, #0]
 8001d82:	6951      	ldr	r1, [r2, #20]
 8001d84:	f011 0f04 	tst.w	r1, #4
 8001d88:	d0d9      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0xc2>
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0d7      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d8e:	7843      	ldrb	r3, [r0, #1]
 8001d90:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001d92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d94:	3301      	adds	r3, #1
 8001d96:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8001d98:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8001da2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001da4:	3b01      	subs	r3, #1
 8001da6:	8523      	strh	r3, [r4, #40]	@ 0x28
 8001da8:	e7c9      	b.n	8001d3e <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001daa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_Master_Transmit+0x138>
        return HAL_ERROR;
 8001db0:	2701      	movs	r7, #1
 8001db2:	e772      	b.n	8001c9a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	6822      	ldr	r2, [r4, #0]
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e7f7      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	6813      	ldr	r3, [r2, #0]
 8001dc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001dd6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8001dda:	e75e      	b.n	8001c9a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8001ddc:	2702      	movs	r7, #2
 8001dde:	e75c      	b.n	8001c9a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001de0:	2702      	movs	r7, #2
 8001de2:	e75a      	b.n	8001c9a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8001de4:	2701      	movs	r7, #1
 8001de6:	e758      	b.n	8001c9a <HAL_I2C_Master_Transmit+0x1e>
 8001de8:	00100002 	.word	0x00100002
 8001dec:	ffff0000 	.word	0xffff0000

08001df0 <HAL_I2C_Master_Receive>:
{
 8001df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001df4:	b089      	sub	sp, #36	@ 0x24
 8001df6:	4604      	mov	r4, r0
 8001df8:	460f      	mov	r7, r1
 8001dfa:	4691      	mov	r9, r2
 8001dfc:	4698      	mov	r8, r3
 8001dfe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  __IO uint32_t count = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff fa70 	bl	80012e8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e08:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 8001e10:	2702      	movs	r7, #2
}
 8001e12:	4638      	mov	r0, r7
 8001e14:	b009      	add	sp, #36	@ 0x24
 8001e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e1a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e1c:	9000      	str	r0, [sp, #0]
 8001e1e:	2319      	movs	r3, #25
 8001e20:	2201      	movs	r2, #1
 8001e22:	499e      	ldr	r1, [pc, #632]	@ (800209c <HAL_I2C_Master_Receive+0x2ac>)
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff fc06 	bl	8001636 <I2C_WaitOnFlagUntilTimeout>
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	f040 817d 	bne.w	800212a <HAL_I2C_Master_Receive+0x33a>
    __HAL_LOCK(hi2c);
 8001e30:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f000 817a 	beq.w	800212e <HAL_I2C_Master_Receive+0x33e>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f012 0f01 	tst.w	r2, #1
 8001e48:	d103      	bne.n	8001e52 <HAL_I2C_Master_Receive+0x62>
      __HAL_I2C_ENABLE(hi2c);
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e52:	6822      	ldr	r2, [r4, #0]
 8001e54:	6813      	ldr	r3, [r2, #0]
 8001e56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e5a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e5c:	2322      	movs	r3, #34	@ 0x22
 8001e5e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e62:	2310      	movs	r3, #16
 8001e64:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001e6c:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e70:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e74:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e76:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e78:	4b89      	ldr	r3, [pc, #548]	@ (80020a0 <HAL_I2C_Master_Receive+0x2b0>)
 8001e7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	4632      	mov	r2, r6
 8001e80:	4639      	mov	r1, r7
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7ff fcf2 	bl	800186c <I2C_MasterRequestRead>
 8001e88:	4607      	mov	r7, r0
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	f040 8151 	bne.w	8002132 <HAL_I2C_Master_Receive+0x342>
    if (hi2c->XferSize == 0U)
 8001e90:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e92:	b95b      	cbnz	r3, 8001eac <HAL_I2C_Master_Receive+0xbc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e94:	9303      	str	r3, [sp, #12]
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	9203      	str	r2, [sp, #12]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	9203      	str	r2, [sp, #12]
 8001ea0:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e076      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1aa>
    else if (hi2c->XferSize == 1U)
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d00f      	beq.n	8001ed0 <HAL_I2C_Master_Receive+0xe0>
    else if (hi2c->XferSize == 2U)
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d021      	beq.n	8001ef8 <HAL_I2C_Master_Receive+0x108>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ebc:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9306      	str	r3, [sp, #24]
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	9206      	str	r2, [sp, #24]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	9306      	str	r3, [sp, #24]
 8001ecc:	9b06      	ldr	r3, [sp, #24]
 8001ece:	e064      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed0:	6822      	ldr	r2, [r4, #0]
 8001ed2:	6813      	ldr	r3, [r2, #0]
 8001ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001edc:	2300      	movs	r3, #0
 8001ede:	9304      	str	r3, [sp, #16]
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	9204      	str	r2, [sp, #16]
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	9204      	str	r2, [sp, #16]
 8001eea:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ef4:	b662      	cpsie	i
}
 8001ef6:	e050      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1aa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	6813      	ldr	r3, [r2, #0]
 8001efc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f00:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f02:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f04:	2300      	movs	r3, #0
 8001f06:	9305      	str	r3, [sp, #20]
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	9205      	str	r2, [sp, #20]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	9205      	str	r2, [sp, #20]
 8001f12:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f1c:	b662      	cpsie	i
}
 8001f1e:	e03c      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f20:	462a      	mov	r2, r5
 8001f22:	4631      	mov	r1, r6
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff fd8f 	bl	8001a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	f040 8103 	bne.w	8002136 <HAL_I2C_Master_Receive+0x346>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f36:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001f38:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001f3e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001f40:	3b01      	subs	r3, #1
 8001f42:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001f44:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001f4e:	e024      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1aa>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f50:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f52:	6822      	ldr	r2, [r4, #0]
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f5a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f62:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001f64:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f66:	3301      	adds	r3, #1
 8001f68:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001f6a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001f70:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f7a:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f82:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001f84:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f86:	3301      	adds	r3, #1
 8001f88:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001f8a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001f90:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f9a:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8001f9c:	2900      	cmp	r1, #0
 8001f9e:	f000 80bb 	beq.w	8002118 <HAL_I2C_Master_Receive+0x328>
      if (hi2c->XferSize <= 3U)
 8001fa2:	2903      	cmp	r1, #3
 8001fa4:	f200 8084 	bhi.w	80020b0 <HAL_I2C_Master_Receive+0x2c0>
        if (hi2c->XferSize == 1U)
 8001fa8:	2901      	cmp	r1, #1
 8001faa:	d0b9      	beq.n	8001f20 <HAL_I2C_Master_Receive+0x130>
        else if (hi2c->XferSize == 2U)
 8001fac:	2902      	cmp	r1, #2
 8001fae:	d10a      	bne.n	8001fc6 <HAL_I2C_Master_Receive+0x1d6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fb0:	9500      	str	r5, [sp, #0]
 8001fb2:	4633      	mov	r3, r6
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	493b      	ldr	r1, [pc, #236]	@ (80020a4 <HAL_I2C_Master_Receive+0x2b4>)
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff fb3c 	bl	8001636 <I2C_WaitOnFlagUntilTimeout>
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d0c6      	beq.n	8001f50 <HAL_I2C_Master_Receive+0x160>
            return HAL_ERROR;
 8001fc2:	2701      	movs	r7, #1
 8001fc4:	e725      	b.n	8001e12 <HAL_I2C_Master_Receive+0x22>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fc6:	9500      	str	r5, [sp, #0]
 8001fc8:	4633      	mov	r3, r6
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4935      	ldr	r1, [pc, #212]	@ (80020a4 <HAL_I2C_Master_Receive+0x2b4>)
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7ff fb31 	bl	8001636 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	f040 80b0 	bne.w	800213a <HAL_I2C_Master_Receive+0x34a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fda:	6822      	ldr	r2, [r4, #0]
 8001fdc:	6813      	ldr	r3, [r2, #0]
 8001fde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fe2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe4:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001fec:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001fee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001ff4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001ffa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29b      	uxth	r3, r3
 8002002:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002004:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <HAL_I2C_Master_Receive+0x2b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	4a28      	ldr	r2, [pc, #160]	@ (80020ac <HAL_I2C_Master_Receive+0x2bc>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002016:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800201a:	9307      	str	r3, [sp, #28]
            count--;
 800201c:	9907      	ldr	r1, [sp, #28]
 800201e:	3901      	subs	r1, #1
 8002020:	9107      	str	r1, [sp, #28]
            if (count == 0U)
 8002022:	9907      	ldr	r1, [sp, #28]
 8002024:	2900      	cmp	r1, #0
 8002026:	d028      	beq.n	800207a <HAL_I2C_Master_Receive+0x28a>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	f012 0f04 	tst.w	r2, #4
 8002030:	d0f4      	beq.n	800201c <HAL_I2C_Master_Receive+0x22c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002038:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002040:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002042:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002048:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800204e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29b      	uxth	r3, r3
 8002056:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002058:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002060:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002062:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002064:	3301      	adds	r3, #1
 8002066:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002068:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800206a:	3b01      	subs	r3, #1
 800206c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800206e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29b      	uxth	r3, r3
 8002076:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002078:	e78f      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1aa>
              hi2c->PreviousState       = I2C_STATE_NONE;
 800207a:	2300      	movs	r3, #0
 800207c:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800207e:	2220      	movs	r2, #32
 8002080:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002084:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002088:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800208a:	f042 0220 	orr.w	r2, r2, #32
 800208e:	6422      	str	r2, [r4, #64]	@ 0x40
 8002090:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8002092:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
              return HAL_ERROR;
 8002096:	2701      	movs	r7, #1
 8002098:	e6bb      	b.n	8001e12 <HAL_I2C_Master_Receive+0x22>
 800209a:	bf00      	nop
 800209c:	00100002 	.word	0x00100002
 80020a0:	ffff0000 	.word	0xffff0000
 80020a4:	00010004 	.word	0x00010004
 80020a8:	20000020 	.word	0x20000020
 80020ac:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b0:	462a      	mov	r2, r5
 80020b2:	4631      	mov	r1, r6
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7ff fcc7 	bl	8001a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d13f      	bne.n	800213e <HAL_I2C_Master_Receive+0x34e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80020cc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80020ce:	3a01      	subs	r2, #1
 80020d0:	b292      	uxth	r2, r2
 80020d2:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80020d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	6959      	ldr	r1, [r3, #20]
 80020e2:	f011 0f04 	tst.w	r1, #4
 80020e6:	f43f af58 	beq.w	8001f9a <HAL_I2C_Master_Receive+0x1aa>
          if (hi2c->XferSize == 3U)
 80020ea:	2a03      	cmp	r2, #3
 80020ec:	d00f      	beq.n	800210e <HAL_I2C_Master_Receive+0x31e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020f4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80020f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020f8:	3301      	adds	r3, #1
 80020fa:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80020fc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80020fe:	3b01      	subs	r3, #1
 8002100:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002102:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29b      	uxth	r3, r3
 800210a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800210c:	e745      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e7ea      	b.n	80020ee <HAL_I2C_Master_Receive+0x2fe>
    hi2c->State = HAL_I2C_STATE_READY;
 8002118:	2320      	movs	r3, #32
 800211a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800211e:	2300      	movs	r3, #0
 8002120:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002124:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002128:	e673      	b.n	8001e12 <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 800212a:	2702      	movs	r7, #2
 800212c:	e671      	b.n	8001e12 <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 800212e:	2702      	movs	r7, #2
 8002130:	e66f      	b.n	8001e12 <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 8002132:	2701      	movs	r7, #1
 8002134:	e66d      	b.n	8001e12 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8002136:	2701      	movs	r7, #1
 8002138:	e66b      	b.n	8001e12 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 800213a:	2701      	movs	r7, #1
 800213c:	e669      	b.n	8001e12 <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 800213e:	2701      	movs	r7, #1
 8002140:	e667      	b.n	8001e12 <HAL_I2C_Master_Receive+0x22>
 8002142:	bf00      	nop

08002144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002144:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_MspInit+0x3c>)
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	619a      	str	r2, [r3, #24]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	f002 0201 	and.w	r2, r2, #1
 8002156:	9200      	str	r2, [sp, #0]
 8002158:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002160:	61da      	str	r2, [r3, #28]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800216c:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <HAL_MspInit+0x40>)
 800216e:	6853      	ldr	r3, [r2, #4]
 8002170:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002174:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002178:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217a:	b002      	add	sp, #8
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000

08002188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002188:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800218a:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <RCC_Delay+0x24>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <RCC_Delay+0x28>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	0a5b      	lsrs	r3, r3, #9
 8002196:	fb00 f303 	mul.w	r3, r0, r3
 800219a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800219c:	bf00      	nop
  }
  while (Delay --);
 800219e:	9b01      	ldr	r3, [sp, #4]
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	9201      	str	r2, [sp, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <RCC_Delay+0x14>
}
 80021a8:	b002      	add	sp, #8
 80021aa:	4770      	bx	lr
 80021ac:	20000020 	.word	0x20000020
 80021b0:	10624dd3 	.word	0x10624dd3

080021b4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80021b4:	2800      	cmp	r0, #0
 80021b6:	f000 81f1 	beq.w	800259c <HAL_RCC_OscConfig+0x3e8>
{
 80021ba:	b570      	push	{r4, r5, r6, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c0:	6803      	ldr	r3, [r0, #0]
 80021c2:	f013 0f01 	tst.w	r3, #1
 80021c6:	d02c      	beq.n	8002222 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c8:	4b99      	ldr	r3, [pc, #612]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d01d      	beq.n	8002210 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d4:	4b96      	ldr	r3, [pc, #600]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d012      	beq.n	8002206 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	6863      	ldr	r3, [r4, #4]
 80021e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e6:	d041      	beq.n	800226c <HAL_RCC_OscConfig+0xb8>
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d155      	bne.n	8002298 <HAL_RCC_OscConfig+0xe4>
 80021ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021f0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e037      	b.n	8002276 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002206:	4b8a      	ldr	r3, [pc, #552]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800220e:	d0e7      	beq.n	80021e0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	4b87      	ldr	r3, [pc, #540]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002218:	d003      	beq.n	8002222 <HAL_RCC_OscConfig+0x6e>
 800221a:	6863      	ldr	r3, [r4, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 81bf 	beq.w	80025a0 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	f013 0f02 	tst.w	r3, #2
 8002228:	d075      	beq.n	8002316 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800222a:	4b81      	ldr	r3, [pc, #516]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f013 0f0c 	tst.w	r3, #12
 8002232:	d05f      	beq.n	80022f4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002234:	4b7e      	ldr	r3, [pc, #504]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d054      	beq.n	80022ea <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002240:	6923      	ldr	r3, [r4, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 808a 	beq.w	800235c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002248:	4b7a      	ldr	r3, [pc, #488]	@ (8002434 <HAL_RCC_OscConfig+0x280>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800224e:	f7ff f84b 	bl	80012e8 <HAL_GetTick>
 8002252:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b76      	ldr	r3, [pc, #472]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f013 0f02 	tst.w	r3, #2
 800225c:	d175      	bne.n	800234a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff f843 	bl	80012e8 <HAL_GetTick>
 8002262:	1b40      	subs	r0, r0, r5
 8002264:	2802      	cmp	r0, #2
 8002266:	d9f5      	bls.n	8002254 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002268:	2003      	movs	r0, #3
 800226a:	e19e      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	4a70      	ldr	r2, [pc, #448]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 800226e:	6813      	ldr	r3, [r2, #0]
 8002270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002274:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002276:	6863      	ldr	r3, [r4, #4]
 8002278:	b343      	cbz	r3, 80022cc <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800227a:	f7ff f835 	bl	80012e8 <HAL_GetTick>
 800227e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002280:	4b6b      	ldr	r3, [pc, #428]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002288:	d1cb      	bne.n	8002222 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228a:	f7ff f82d 	bl	80012e8 <HAL_GetTick>
 800228e:	1b40      	subs	r0, r0, r5
 8002290:	2864      	cmp	r0, #100	@ 0x64
 8002292:	d9f5      	bls.n	8002280 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002294:	2003      	movs	r0, #3
 8002296:	e188      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800229c:	d009      	beq.n	80022b2 <HAL_RCC_OscConfig+0xfe>
 800229e:	4b64      	ldr	r3, [pc, #400]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e7e1      	b.n	8002276 <HAL_RCC_OscConfig+0xc2>
 80022b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022b6:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e7d4      	b.n	8002276 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80022cc:	f7ff f80c 	bl	80012e8 <HAL_GetTick>
 80022d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b57      	ldr	r3, [pc, #348]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80022da:	d0a2      	beq.n	8002222 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff f804 	bl	80012e8 <HAL_GetTick>
 80022e0:	1b40      	subs	r0, r0, r5
 80022e2:	2864      	cmp	r0, #100	@ 0x64
 80022e4:	d9f5      	bls.n	80022d2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80022e6:	2003      	movs	r0, #3
 80022e8:	e15f      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ea:	4b51      	ldr	r3, [pc, #324]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80022f2:	d1a5      	bne.n	8002240 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f013 0f02 	tst.w	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_OscConfig+0x152>
 80022fe:	6923      	ldr	r3, [r4, #16]
 8002300:	2b01      	cmp	r3, #1
 8002302:	f040 814f 	bne.w	80025a4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4a4a      	ldr	r2, [pc, #296]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800230e:	6961      	ldr	r1, [r4, #20]
 8002310:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002314:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	f013 0f08 	tst.w	r3, #8
 800231c:	d033      	beq.n	8002386 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800231e:	69a3      	ldr	r3, [r4, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d05c      	beq.n	80023de <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002324:	4b43      	ldr	r3, [pc, #268]	@ (8002434 <HAL_RCC_OscConfig+0x280>)
 8002326:	2201      	movs	r2, #1
 8002328:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800232c:	f7fe ffdc 	bl	80012e8 <HAL_GetTick>
 8002330:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	4b3f      	ldr	r3, [pc, #252]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	f013 0f02 	tst.w	r3, #2
 800233a:	d121      	bne.n	8002380 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe ffd4 	bl	80012e8 <HAL_GetTick>
 8002340:	1b40      	subs	r0, r0, r5
 8002342:	2802      	cmp	r0, #2
 8002344:	d9f5      	bls.n	8002332 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
 8002348:	e12f      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234a:	4a39      	ldr	r2, [pc, #228]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 800234c:	6813      	ldr	r3, [r2, #0]
 800234e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002352:	6961      	ldr	r1, [r4, #20]
 8002354:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e7dc      	b.n	8002316 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800235c:	4b35      	ldr	r3, [pc, #212]	@ (8002434 <HAL_RCC_OscConfig+0x280>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002362:	f7fe ffc1 	bl	80012e8 <HAL_GetTick>
 8002366:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002368:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f013 0f02 	tst.w	r3, #2
 8002370:	d0d1      	beq.n	8002316 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002372:	f7fe ffb9 	bl	80012e8 <HAL_GetTick>
 8002376:	1b40      	subs	r0, r0, r5
 8002378:	2802      	cmp	r0, #2
 800237a:	d9f5      	bls.n	8002368 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800237c:	2003      	movs	r0, #3
 800237e:	e114      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002380:	2001      	movs	r0, #1
 8002382:	f7ff ff01 	bl	8002188 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	f013 0f04 	tst.w	r3, #4
 800238c:	f000 8096 	beq.w	80024bc <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002390:	4b27      	ldr	r3, [pc, #156]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002398:	d134      	bne.n	8002404 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b25      	ldr	r3, [pc, #148]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80023a2:	61da      	str	r2, [r3, #28]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023ae:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <HAL_RCC_OscConfig+0x284>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80023b8:	d026      	beq.n	8002408 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ba:	68e3      	ldr	r3, [r4, #12]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d03d      	beq.n	800243c <HAL_RCC_OscConfig+0x288>
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d153      	bne.n	800246c <HAL_RCC_OscConfig+0x2b8>
 80023c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023c8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	621a      	str	r2, [r3, #32]
 80023d4:	6a1a      	ldr	r2, [r3, #32]
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	621a      	str	r2, [r3, #32]
 80023dc:	e033      	b.n	8002446 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_RCC_OscConfig+0x280>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80023e6:	f7fe ff7f 	bl	80012e8 <HAL_GetTick>
 80023ea:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	f013 0f02 	tst.w	r3, #2
 80023f4:	d0c7      	beq.n	8002386 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f6:	f7fe ff77 	bl	80012e8 <HAL_GetTick>
 80023fa:	1b40      	subs	r0, r0, r5
 80023fc:	2802      	cmp	r0, #2
 80023fe:	d9f5      	bls.n	80023ec <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8002400:	2003      	movs	r0, #3
 8002402:	e0d2      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8002404:	2500      	movs	r5, #0
 8002406:	e7d3      	b.n	80023b0 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002408:	4a0b      	ldr	r2, [pc, #44]	@ (8002438 <HAL_RCC_OscConfig+0x284>)
 800240a:	6813      	ldr	r3, [r2, #0]
 800240c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002410:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002412:	f7fe ff69 	bl	80012e8 <HAL_GetTick>
 8002416:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <HAL_RCC_OscConfig+0x284>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002420:	d1cb      	bne.n	80023ba <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe ff61 	bl	80012e8 <HAL_GetTick>
 8002426:	1b80      	subs	r0, r0, r6
 8002428:	2864      	cmp	r0, #100	@ 0x64
 800242a:	d9f5      	bls.n	8002418 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 800242c:	2003      	movs	r0, #3
 800242e:	e0bc      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
 8002430:	40021000 	.word	0x40021000
 8002434:	42420000 	.word	0x42420000
 8002438:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243c:	4a5f      	ldr	r2, [pc, #380]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 800243e:	6a13      	ldr	r3, [r2, #32]
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002446:	68e3      	ldr	r3, [r4, #12]
 8002448:	b333      	cbz	r3, 8002498 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800244a:	f7fe ff4d 	bl	80012e8 <HAL_GetTick>
 800244e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b5a      	ldr	r3, [pc, #360]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f013 0f02 	tst.w	r3, #2
 8002458:	d12f      	bne.n	80024ba <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe ff45 	bl	80012e8 <HAL_GetTick>
 800245e:	1b80      	subs	r0, r0, r6
 8002460:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002464:	4298      	cmp	r0, r3
 8002466:	d9f3      	bls.n	8002450 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002468:	2003      	movs	r0, #3
 800246a:	e09e      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246c:	2b05      	cmp	r3, #5
 800246e:	d009      	beq.n	8002484 <HAL_RCC_OscConfig+0x2d0>
 8002470:	4b52      	ldr	r3, [pc, #328]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 8002472:	6a1a      	ldr	r2, [r3, #32]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	621a      	str	r2, [r3, #32]
 800247a:	6a1a      	ldr	r2, [r3, #32]
 800247c:	f022 0204 	bic.w	r2, r2, #4
 8002480:	621a      	str	r2, [r3, #32]
 8002482:	e7e0      	b.n	8002446 <HAL_RCC_OscConfig+0x292>
 8002484:	4b4d      	ldr	r3, [pc, #308]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 8002486:	6a1a      	ldr	r2, [r3, #32]
 8002488:	f042 0204 	orr.w	r2, r2, #4
 800248c:	621a      	str	r2, [r3, #32]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	621a      	str	r2, [r3, #32]
 8002496:	e7d6      	b.n	8002446 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002498:	f7fe ff26 	bl	80012e8 <HAL_GetTick>
 800249c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	f013 0f02 	tst.w	r3, #2
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a8:	f7fe ff1e 	bl	80012e8 <HAL_GetTick>
 80024ac:	1b80      	subs	r0, r0, r6
 80024ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80024b2:	4298      	cmp	r0, r3
 80024b4:	d9f3      	bls.n	800249e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80024b6:	2003      	movs	r0, #3
 80024b8:	e077      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80024ba:	b9e5      	cbnz	r5, 80024f6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024bc:	69e3      	ldr	r3, [r4, #28]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d072      	beq.n	80025a8 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c2:	4a3e      	ldr	r2, [pc, #248]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 80024c4:	6852      	ldr	r2, [r2, #4]
 80024c6:	f002 020c 	and.w	r2, r2, #12
 80024ca:	2a08      	cmp	r2, #8
 80024cc:	d056      	beq.n	800257c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d017      	beq.n	8002502 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <HAL_RCC_OscConfig+0x40c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80024d8:	f7fe ff06 	bl	80012e8 <HAL_GetTick>
 80024dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024de:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80024e6:	d047      	beq.n	8002578 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fefe 	bl	80012e8 <HAL_GetTick>
 80024ec:	1b00      	subs	r0, r0, r4
 80024ee:	2802      	cmp	r0, #2
 80024f0:	d9f5      	bls.n	80024de <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80024f2:	2003      	movs	r0, #3
 80024f4:	e059      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4a31      	ldr	r2, [pc, #196]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 80024f8:	69d3      	ldr	r3, [r2, #28]
 80024fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	61d3      	str	r3, [r2, #28]
 8002500:	e7dc      	b.n	80024bc <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_RCC_OscConfig+0x40c>)
 8002504:	2200      	movs	r2, #0
 8002506:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002508:	f7fe feee 	bl	80012e8 <HAL_GetTick>
 800250c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250e:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002516:	d006      	beq.n	8002526 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fee6 	bl	80012e8 <HAL_GetTick>
 800251c:	1b40      	subs	r0, r0, r5
 800251e:	2802      	cmp	r0, #2
 8002520:	d9f5      	bls.n	800250e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002522:	2003      	movs	r0, #3
 8002524:	e041      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002526:	6a23      	ldr	r3, [r4, #32]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800252c:	d01a      	beq.n	8002564 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800252e:	4923      	ldr	r1, [pc, #140]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 8002530:	684b      	ldr	r3, [r1, #4]
 8002532:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8002536:	6a22      	ldr	r2, [r4, #32]
 8002538:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800253a:	4302      	orrs	r2, r0
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <HAL_RCC_OscConfig+0x40c>)
 8002542:	2201      	movs	r2, #1
 8002544:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002546:	f7fe fecf 	bl	80012e8 <HAL_GetTick>
 800254a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002554:	d10e      	bne.n	8002574 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe fec7 	bl	80012e8 <HAL_GetTick>
 800255a:	1b00      	subs	r0, r0, r4
 800255c:	2802      	cmp	r0, #2
 800255e:	d9f5      	bls.n	800254c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002560:	2003      	movs	r0, #3
 8002562:	e022      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002564:	4a15      	ldr	r2, [pc, #84]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 8002566:	6853      	ldr	r3, [r2, #4]
 8002568:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800256c:	68a1      	ldr	r1, [r4, #8]
 800256e:	430b      	orrs	r3, r1
 8002570:	6053      	str	r3, [r2, #4]
 8002572:	e7dc      	b.n	800252e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002574:	2000      	movs	r0, #0
 8002576:	e018      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
 8002578:	2000      	movs	r0, #0
 800257a:	e016      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	2b01      	cmp	r3, #1
 800257e:	d016      	beq.n	80025ae <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002580:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <HAL_RCC_OscConfig+0x408>)
 8002582:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002588:	6a22      	ldr	r2, [r4, #32]
 800258a:	4291      	cmp	r1, r2
 800258c:	d111      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800258e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002592:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002594:	4293      	cmp	r3, r2
 8002596:	d10e      	bne.n	80025b6 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002598:	2000      	movs	r0, #0
 800259a:	e006      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800259c:	2001      	movs	r0, #1
}
 800259e:	4770      	bx	lr
        return HAL_ERROR;
 80025a0:	2001      	movs	r0, #1
 80025a2:	e002      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80025a4:	2001      	movs	r0, #1
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80025a8:	2000      	movs	r0, #0
}
 80025aa:	b002      	add	sp, #8
 80025ac:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80025ae:	2001      	movs	r0, #1
 80025b0:	e7fb      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80025b2:	2001      	movs	r0, #1
 80025b4:	e7f9      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
 80025b6:	2001      	movs	r0, #1
 80025b8:	e7f7      	b.n	80025aa <HAL_RCC_OscConfig+0x3f6>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	42420000 	.word	0x42420000

080025c4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x40>)
 80025c6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80025c8:	f003 020c 	and.w	r2, r3, #12
 80025cc:	2a08      	cmp	r2, #8
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80025d0:	480d      	ldr	r0, [pc, #52]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80025d2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025d4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80025d8:	490c      	ldr	r1, [pc, #48]	@ (800260c <HAL_RCC_GetSysClockFreq+0x48>)
 80025da:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025dc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x40>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80025ea:	4a09      	ldr	r2, [pc, #36]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x4c>)
 80025ec:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ee:	4a06      	ldr	r2, [pc, #24]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x44>)
 80025f0:	fb02 f000 	mul.w	r0, r2, r0
 80025f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80025f8:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x50>)
 80025fc:	fb03 f000 	mul.w	r0, r3, r0
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	007a1200 	.word	0x007a1200
 800260c:	08003d68 	.word	0x08003d68
 8002610:	08003d64 	.word	0x08003d64
 8002614:	003d0900 	.word	0x003d0900

08002618 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002618:	2800      	cmp	r0, #0
 800261a:	f000 80a0 	beq.w	800275e <HAL_RCC_ClockConfig+0x146>
{
 800261e:	b570      	push	{r4, r5, r6, lr}
 8002620:	460d      	mov	r5, r1
 8002622:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b52      	ldr	r3, [pc, #328]	@ (8002770 <HAL_RCC_ClockConfig+0x158>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	428b      	cmp	r3, r1
 800262e:	d20b      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002630:	4a4f      	ldr	r2, [pc, #316]	@ (8002770 <HAL_RCC_ClockConfig+0x158>)
 8002632:	6813      	ldr	r3, [r2, #0]
 8002634:	f023 0307 	bic.w	r3, r3, #7
 8002638:	430b      	orrs	r3, r1
 800263a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263c:	6813      	ldr	r3, [r2, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	428b      	cmp	r3, r1
 8002644:	f040 808d 	bne.w	8002762 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	f013 0f02 	tst.w	r3, #2
 800264e:	d017      	beq.n	8002680 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	f013 0f04 	tst.w	r3, #4
 8002654:	d004      	beq.n	8002660 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002656:	4a47      	ldr	r2, [pc, #284]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 8002658:	6853      	ldr	r3, [r2, #4]
 800265a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800265e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	f013 0f08 	tst.w	r3, #8
 8002666:	d004      	beq.n	8002672 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002668:	4a42      	ldr	r2, [pc, #264]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 800266a:	6853      	ldr	r3, [r2, #4]
 800266c:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002670:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002672:	4a40      	ldr	r2, [pc, #256]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 8002674:	6853      	ldr	r3, [r2, #4]
 8002676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800267a:	68a1      	ldr	r1, [r4, #8]
 800267c:	430b      	orrs	r3, r1
 800267e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	f013 0f01 	tst.w	r3, #1
 8002686:	d031      	beq.n	80026ec <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002688:	6863      	ldr	r3, [r4, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d020      	beq.n	80026d0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268e:	2b02      	cmp	r3, #2
 8002690:	d025      	beq.n	80026de <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4a38      	ldr	r2, [pc, #224]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	f012 0f02 	tst.w	r2, #2
 800269a:	d064      	beq.n	8002766 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269c:	4935      	ldr	r1, [pc, #212]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 800269e:	684a      	ldr	r2, [r1, #4]
 80026a0:	f022 0203 	bic.w	r2, r2, #3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80026a8:	f7fe fe1e 	bl	80012e8 <HAL_GetTick>
 80026ac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	6862      	ldr	r2, [r4, #4]
 80026b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026bc:	d016      	beq.n	80026ec <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026be:	f7fe fe13 	bl	80012e8 <HAL_GetTick>
 80026c2:	1b80      	subs	r0, r0, r6
 80026c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80026c8:	4298      	cmp	r0, r3
 80026ca:	d9f0      	bls.n	80026ae <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80026cc:	2003      	movs	r0, #3
 80026ce:	e045      	b.n	800275c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d0:	4a28      	ldr	r2, [pc, #160]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80026d8:	d1e0      	bne.n	800269c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80026da:	2001      	movs	r0, #1
 80026dc:	e03e      	b.n	800275c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4a25      	ldr	r2, [pc, #148]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80026e6:	d1d9      	bne.n	800269c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
 80026ea:	e037      	b.n	800275c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_RCC_ClockConfig+0x158>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	42ab      	cmp	r3, r5
 80026f6:	d90a      	bls.n	800270e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002770 <HAL_RCC_ClockConfig+0x158>)
 80026fa:	6813      	ldr	r3, [r2, #0]
 80026fc:	f023 0307 	bic.w	r3, r3, #7
 8002700:	432b      	orrs	r3, r5
 8002702:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002704:	6813      	ldr	r3, [r2, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	42ab      	cmp	r3, r5
 800270c:	d12d      	bne.n	800276a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	f013 0f04 	tst.w	r3, #4
 8002714:	d006      	beq.n	8002724 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002716:	4a17      	ldr	r2, [pc, #92]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 8002718:	6853      	ldr	r3, [r2, #4]
 800271a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800271e:	68e1      	ldr	r1, [r4, #12]
 8002720:	430b      	orrs	r3, r1
 8002722:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	f013 0f08 	tst.w	r3, #8
 800272a:	d007      	beq.n	800273c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272c:	4a11      	ldr	r2, [pc, #68]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 800272e:	6853      	ldr	r3, [r2, #4]
 8002730:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002734:	6921      	ldr	r1, [r4, #16]
 8002736:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800273a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273c:	f7ff ff42 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002740:	4b0c      	ldr	r3, [pc, #48]	@ (8002774 <HAL_RCC_ClockConfig+0x15c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002748:	4a0b      	ldr	r2, [pc, #44]	@ (8002778 <HAL_RCC_ClockConfig+0x160>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	40d8      	lsrs	r0, r3
 800274e:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_RCC_ClockConfig+0x164>)
 8002750:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002752:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <HAL_RCC_ClockConfig+0x168>)
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	f7fe fd83 	bl	8001260 <HAL_InitTick>
  return HAL_OK;
 800275a:	2000      	movs	r0, #0
}
 800275c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800275e:	2001      	movs	r0, #1
}
 8002760:	4770      	bx	lr
    return HAL_ERROR;
 8002762:	2001      	movs	r0, #1
 8002764:	e7fa      	b.n	800275c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002766:	2001      	movs	r0, #1
 8002768:	e7f8      	b.n	800275c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800276a:	2001      	movs	r0, #1
 800276c:	e7f6      	b.n	800275c <HAL_RCC_ClockConfig+0x144>
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000
 8002774:	40021000 	.word	0x40021000
 8002778:	08003d80 	.word	0x08003d80
 800277c:	20000020 	.word	0x20000020
 8002780:	2000001c 	.word	0x2000001c

08002784 <HAL_RCC_GetHCLKFreq>:
}
 8002784:	4b01      	ldr	r3, [pc, #4]	@ (800278c <HAL_RCC_GetHCLKFreq+0x8>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000020 	.word	0x20000020

08002790 <HAL_RCC_GetPCLK1Freq>:
{
 8002790:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002792:	f7ff fff7 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 8002796:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800279e:	4a03      	ldr	r2, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80027a2:	40d8      	lsrs	r0, r3
 80027a4:	bd08      	pop	{r3, pc}
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08003d78 	.word	0x08003d78

080027b0 <HAL_RCC_GetPCLK2Freq>:
{
 80027b0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b2:	f7ff ffe7 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027b6:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80027be:	4a03      	ldr	r2, [pc, #12]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80027c2:	40d8      	lsrs	r0, r3
 80027c4:	bd08      	pop	{r3, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08003d78 	.word	0x08003d78

080027d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027d0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	f102 030c 	add.w	r3, r2, #12
 80027d6:	e853 3f00 	ldrex	r3, [r3]
 80027da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027de:	320c      	adds	r2, #12
 80027e0:	e842 3100 	strex	r1, r3, [r2]
 80027e4:	2900      	cmp	r1, #0
 80027e6:	d1f3      	bne.n	80027d0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ea:	f102 0314 	add.w	r3, r2, #20
 80027ee:	e853 3f00 	ldrex	r3, [r3]
 80027f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f6:	3214      	adds	r2, #20
 80027f8:	e842 3100 	strex	r1, r3, [r2]
 80027fc:	2900      	cmp	r1, #0
 80027fe:	d1f3      	bne.n	80027e8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002800:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002802:	2b01      	cmp	r3, #1
 8002804:	d005      	beq.n	8002812 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002806:	2320      	movs	r3, #32
 8002808:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280c:	2300      	movs	r3, #0
 800280e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002810:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002812:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002814:	f102 030c 	add.w	r3, r2, #12
 8002818:	e853 3f00 	ldrex	r3, [r3]
 800281c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002820:	320c      	adds	r2, #12
 8002822:	e842 3100 	strex	r1, r3, [r2]
 8002826:	2900      	cmp	r1, #0
 8002828:	d1f3      	bne.n	8002812 <UART_EndRxTransfer+0x42>
 800282a:	e7ec      	b.n	8002806 <UART_EndRxTransfer+0x36>

0800282c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002830:	6802      	ldr	r2, [r0, #0]
 8002832:	6913      	ldr	r3, [r2, #16]
 8002834:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002838:	68c1      	ldr	r1, [r0, #12]
 800283a:	430b      	orrs	r3, r1
 800283c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800283e:	6883      	ldr	r3, [r0, #8]
 8002840:	6902      	ldr	r2, [r0, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	6942      	ldr	r2, [r0, #20]
 8002846:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002848:	6801      	ldr	r1, [r0, #0]
 800284a:	68cb      	ldr	r3, [r1, #12]
 800284c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002850:	f023 030c 	bic.w	r3, r3, #12
 8002854:	4313      	orrs	r3, r2
 8002856:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002858:	6802      	ldr	r2, [r0, #0]
 800285a:	6953      	ldr	r3, [r2, #20]
 800285c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002860:	6981      	ldr	r1, [r0, #24]
 8002862:	430b      	orrs	r3, r1
 8002864:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002866:	6802      	ldr	r2, [r0, #0]
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <UART_SetConfig+0x8c>)
 800286a:	429a      	cmp	r2, r3
 800286c:	d020      	beq.n	80028b0 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800286e:	f7ff ff8f 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 8002872:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002874:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002878:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800287c:	6863      	ldr	r3, [r4, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fbb2 f2f3 	udiv	r2, r2, r3
 8002884:	480d      	ldr	r0, [pc, #52]	@ (80028bc <UART_SetConfig+0x90>)
 8002886:	fba0 3102 	umull	r3, r1, r0, r2
 800288a:	0949      	lsrs	r1, r1, #5
 800288c:	2364      	movs	r3, #100	@ 0x64
 800288e:	fb03 2311 	mls	r3, r3, r1, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	3332      	adds	r3, #50	@ 0x32
 8002896:	fba0 0303 	umull	r0, r3, r0, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028a0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	6821      	ldr	r1, [r4, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80028ae:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80028b0:	f7ff ff7e 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	e7dd      	b.n	8002874 <UART_SetConfig+0x48>
 80028b8:	40013800 	.word	0x40013800
 80028bc:	51eb851f 	.word	0x51eb851f

080028c0 <UART_WaitOnFlagUntilTimeout>:
{
 80028c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028c4:	b083      	sub	sp, #12
 80028c6:	4605      	mov	r5, r0
 80028c8:	460e      	mov	r6, r1
 80028ca:	4617      	mov	r7, r2
 80028cc:	4699      	mov	r9, r3
 80028ce:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d2:	682b      	ldr	r3, [r5, #0]
 80028d4:	681c      	ldr	r4, [r3, #0]
 80028d6:	ea36 0404 	bics.w	r4, r6, r4
 80028da:	bf0c      	ite	eq
 80028dc:	2401      	moveq	r4, #1
 80028de:	2400      	movne	r4, #0
 80028e0:	42bc      	cmp	r4, r7
 80028e2:	d128      	bne.n	8002936 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80028e4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80028e8:	d0f3      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7fe fcfd 	bl	80012e8 <HAL_GetTick>
 80028ee:	eba0 0009 	sub.w	r0, r0, r9
 80028f2:	4540      	cmp	r0, r8
 80028f4:	d823      	bhi.n	800293e <UART_WaitOnFlagUntilTimeout+0x7e>
 80028f6:	f1b8 0f00 	cmp.w	r8, #0
 80028fa:	d022      	beq.n	8002942 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	f012 0f04 	tst.w	r2, #4
 8002904:	d0e5      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x12>
 8002906:	2e80      	cmp	r6, #128	@ 0x80
 8002908:	d0e3      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x12>
 800290a:	2e40      	cmp	r6, #64	@ 0x40
 800290c:	d0e1      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	f012 0f08 	tst.w	r2, #8
 8002914:	d0dd      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002916:	2400      	movs	r4, #0
 8002918:	9401      	str	r4, [sp, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	9201      	str	r2, [sp, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002924:	4628      	mov	r0, r5
 8002926:	f7ff ff53 	bl	80027d0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800292a:	2308      	movs	r3, #8
 800292c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800292e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002932:	2001      	movs	r0, #1
 8002934:	e000      	b.n	8002938 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002936:	2000      	movs	r0, #0
}
 8002938:	b003      	add	sp, #12
 800293a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800293e:	2003      	movs	r0, #3
 8002940:	e7fa      	b.n	8002938 <UART_WaitOnFlagUntilTimeout+0x78>
 8002942:	2003      	movs	r0, #3
 8002944:	e7f8      	b.n	8002938 <UART_WaitOnFlagUntilTimeout+0x78>

08002946 <HAL_UART_Init>:
  if (huart == NULL)
 8002946:	b360      	cbz	r0, 80029a2 <HAL_UART_Init+0x5c>
{
 8002948:	b510      	push	{r4, lr}
 800294a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800294c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002950:	b313      	cbz	r3, 8002998 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002952:	2324      	movs	r3, #36	@ 0x24
 8002954:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	68d3      	ldr	r3, [r2, #12]
 800295c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002960:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002962:	4620      	mov	r0, r4
 8002964:	f7ff ff62 	bl	800282c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002968:	6822      	ldr	r2, [r4, #0]
 800296a:	6913      	ldr	r3, [r2, #16]
 800296c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002970:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002972:	6822      	ldr	r2, [r4, #0]
 8002974:	6953      	ldr	r3, [r2, #20]
 8002976:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800297a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800297c:	6822      	ldr	r2, [r4, #0]
 800297e:	68d3      	ldr	r3, [r2, #12]
 8002980:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002984:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002986:	2000      	movs	r0, #0
 8002988:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800298a:	2320      	movs	r3, #32
 800298c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002994:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002996:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002998:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800299c:	f000 f8d0 	bl	8002b40 <HAL_UART_MspInit>
 80029a0:	e7d7      	b.n	8002952 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
}
 80029a4:	4770      	bx	lr

080029a6 <HAL_UART_Transmit>:
{
 80029a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80029ae:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d156      	bne.n	8002a64 <HAL_UART_Transmit+0xbe>
 80029b6:	4604      	mov	r4, r0
 80029b8:	460d      	mov	r5, r1
 80029ba:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80029bc:	2900      	cmp	r1, #0
 80029be:	d055      	beq.n	8002a6c <HAL_UART_Transmit+0xc6>
 80029c0:	b90a      	cbnz	r2, 80029c6 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 80029c2:	2001      	movs	r0, #1
 80029c4:	e04f      	b.n	8002a66 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ca:	2321      	movs	r3, #33	@ 0x21
 80029cc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80029d0:	f7fe fc8a 	bl	80012e8 <HAL_GetTick>
 80029d4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80029d6:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029da:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029de:	68a3      	ldr	r3, [r4, #8]
 80029e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029e4:	d002      	beq.n	80029ec <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 80029e6:	f04f 0800 	mov.w	r8, #0
 80029ea:	e014      	b.n	8002a16 <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ec:	6923      	ldr	r3, [r4, #16]
 80029ee:	b32b      	cbz	r3, 8002a3c <HAL_UART_Transmit+0x96>
      pdata16bits = NULL;
 80029f0:	f04f 0800 	mov.w	r8, #0
 80029f4:	e00f      	b.n	8002a16 <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 80029f6:	2320      	movs	r3, #32
 80029f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80029fc:	2003      	movs	r0, #3
 80029fe:	e032      	b.n	8002a66 <HAL_UART_Transmit+0xc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a00:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002a04:	6822      	ldr	r2, [r4, #0]
 8002a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002a0c:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	3a01      	subs	r2, #1
 8002a12:	b292      	uxth	r2, r2
 8002a14:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a16:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b193      	cbz	r3, 8002a42 <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a1c:	9600      	str	r6, [sp, #0]
 8002a1e:	463b      	mov	r3, r7
 8002a20:	2200      	movs	r2, #0
 8002a22:	2180      	movs	r1, #128	@ 0x80
 8002a24:	4620      	mov	r0, r4
 8002a26:	f7ff ff4b 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d1e3      	bne.n	80029f6 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8002a2e:	2d00      	cmp	r5, #0
 8002a30:	d0e6      	beq.n	8002a00 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a32:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a3a:	e7e7      	b.n	8002a0c <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 8002a3c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002a3e:	2500      	movs	r5, #0
 8002a40:	e7e9      	b.n	8002a16 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a42:	9600      	str	r6, [sp, #0]
 8002a44:	463b      	mov	r3, r7
 8002a46:	2200      	movs	r2, #0
 8002a48:	2140      	movs	r1, #64	@ 0x40
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f7ff ff38 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 8002a50:	b918      	cbnz	r0, 8002a5a <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8002a52:	2320      	movs	r3, #32
 8002a54:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002a58:	e005      	b.n	8002a66 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002a60:	2003      	movs	r0, #3
 8002a62:	e000      	b.n	8002a66 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8002a64:	2002      	movs	r0, #2
}
 8002a66:	b002      	add	sp, #8
 8002a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	e7fa      	b.n	8002a66 <HAL_UART_Transmit+0xc0>

08002a70 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a70:	e7fe      	b.n	8002a70 <NMI_Handler>

08002a72 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a72:	e7fe      	b.n	8002a72 <HardFault_Handler>

08002a74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <MemManage_Handler>

08002a76 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a76:	e7fe      	b.n	8002a76 <BusFault_Handler>

08002a78 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <UsageFault_Handler>

08002a7a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a7a:	4770      	bx	lr

08002a7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7c:	4770      	bx	lr

08002a7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a7e:	4770      	bx	lr

08002a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a82:	f7fe fc25 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a86:	bd08      	pop	{r3, pc}

08002a88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	2500      	movs	r5, #0
 8002a90:	e006      	b.n	8002aa0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002a92:	f3af 8000 	nop.w
 8002a96:	4621      	mov	r1, r4
 8002a98:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002a9e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa0:	42b5      	cmp	r5, r6
 8002aa2:	dbf6      	blt.n	8002a92 <_read+0xa>
  }

  return len;
}
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}

08002aa8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	4770      	bx	lr

08002aae <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002aae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ab2:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	4770      	bx	lr

08002ab8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002ab8:	2001      	movs	r0, #1
 8002aba:	4770      	bx	lr

08002abc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002abc:	2000      	movs	r0, #0
 8002abe:	4770      	bx	lr

08002ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8002af8 <_sbrk+0x38>)
 8002ac6:	490d      	ldr	r1, [pc, #52]	@ (8002afc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac8:	480d      	ldr	r0, [pc, #52]	@ (8002b00 <_sbrk+0x40>)
 8002aca:	6800      	ldr	r0, [r0, #0]
 8002acc:	b140      	cbz	r0, 8002ae0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ace:	480c      	ldr	r0, [pc, #48]	@ (8002b00 <_sbrk+0x40>)
 8002ad0:	6800      	ldr	r0, [r0, #0]
 8002ad2:	4403      	add	r3, r0
 8002ad4:	1a52      	subs	r2, r2, r1
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d806      	bhi.n	8002ae8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002ada:	4a09      	ldr	r2, [pc, #36]	@ (8002b00 <_sbrk+0x40>)
 8002adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002ade:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002ae0:	4807      	ldr	r0, [pc, #28]	@ (8002b00 <_sbrk+0x40>)
 8002ae2:	4c08      	ldr	r4, [pc, #32]	@ (8002b04 <_sbrk+0x44>)
 8002ae4:	6004      	str	r4, [r0, #0]
 8002ae6:	e7f2      	b.n	8002ace <_sbrk+0xe>
    errno = ENOMEM;
 8002ae8:	f000 faec 	bl	80030c4 <__errno>
 8002aec:	230c      	movs	r3, #12
 8002aee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	e7f3      	b.n	8002ade <_sbrk+0x1e>
 8002af6:	bf00      	nop
 8002af8:	20005000 	.word	0x20005000
 8002afc:	00000400 	.word	0x00000400
 8002b00:	200000f4 	.word	0x200000f4
 8002b04:	20000290 	.word	0x20000290

08002b08 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b08:	4770      	bx	lr
	...

08002b0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b0c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b0e:	480a      	ldr	r0, [pc, #40]	@ (8002b38 <MX_USART1_UART_Init+0x2c>)
 8002b10:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <MX_USART1_UART_Init+0x30>)
 8002b12:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002b14:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002b18:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b1e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b20:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b22:	220c      	movs	r2, #12
 8002b24:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b26:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b28:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b2a:	f7ff ff0c 	bl	8002946 <HAL_UART_Init>
 8002b2e:	b900      	cbnz	r0, 8002b32 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b30:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b32:	f7fe fb59 	bl	80011e8 <Error_Handler>
}
 8002b36:	e7fb      	b.n	8002b30 <MX_USART1_UART_Init+0x24>
 8002b38:	200000f8 	.word	0x200000f8
 8002b3c:	40013800 	.word	0x40013800

08002b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b40:	b530      	push	{r4, r5, lr}
 8002b42:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	2300      	movs	r3, #0
 8002b46:	9302      	str	r3, [sp, #8]
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8002b4e:	6802      	ldr	r2, [r0, #0]
 8002b50:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_UART_MspInit+0x7c>)
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_UART_MspInit+0x1a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b56:	b007      	add	sp, #28
 8002b58:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b5a:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b64:	619a      	str	r2, [r3, #24]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002b6c:	9200      	str	r2, [sp, #0]
 8002b6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	f042 0204 	orr.w	r2, r2, #4
 8002b76:	619a      	str	r2, [r3, #24]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b82:	2340      	movs	r3, #64	@ 0x40
 8002b84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	ad02      	add	r5, sp, #8
 8002b90:	4c0b      	ldr	r4, [pc, #44]	@ (8002bc0 <HAL_UART_MspInit+0x80>)
 8002b92:	4629      	mov	r1, r5
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7fe fc2b 	bl	80013f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7fe fc22 	bl	80013f0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002bac:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <HAL_UART_MspInit+0x84>)
 8002bae:	6853      	ldr	r3, [r2, #4]
 8002bb0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	6053      	str	r3, [r2, #4]
}
 8002bba:	e7cc      	b.n	8002b56 <HAL_UART_MspInit+0x16>
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40010c00 	.word	0x40010c00
 8002bc4:	40010000 	.word	0x40010000

08002bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bc8:	f7ff ff9e 	bl	8002b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bcc:	480b      	ldr	r0, [pc, #44]	@ (8002bfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bce:	490c      	ldr	r1, [pc, #48]	@ (8002c00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002c04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a09      	ldr	r2, [pc, #36]	@ (8002c08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002be4:	4c09      	ldr	r4, [pc, #36]	@ (8002c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f000 fa6d 	bl	80030d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bf6:	f7fe fb22 	bl	800123e <main>
  bx lr
 8002bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8002bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c00:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002c04:	08003dcc 	.word	0x08003dcc
  ldr r2, =_sbss
 8002c08:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002c0c:	2000028c 	.word	0x2000028c

08002c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC1_2_IRQHandler>
	...

08002c14 <std>:
 8002c14:	2300      	movs	r3, #0
 8002c16:	b510      	push	{r4, lr}
 8002c18:	4604      	mov	r4, r0
 8002c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8002c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c22:	6083      	str	r3, [r0, #8]
 8002c24:	8181      	strh	r1, [r0, #12]
 8002c26:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c28:	81c2      	strh	r2, [r0, #14]
 8002c2a:	6183      	str	r3, [r0, #24]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	2208      	movs	r2, #8
 8002c30:	305c      	adds	r0, #92	@ 0x5c
 8002c32:	f000 f9f9 	bl	8003028 <memset>
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <std+0x58>)
 8002c38:	6224      	str	r4, [r4, #32]
 8002c3a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <std+0x5c>)
 8002c3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c40:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <std+0x60>)
 8002c42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <std+0x64>)
 8002c46:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c48:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <std+0x68>)
 8002c4a:	429c      	cmp	r4, r3
 8002c4c:	d006      	beq.n	8002c5c <std+0x48>
 8002c4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c52:	4294      	cmp	r4, r2
 8002c54:	d002      	beq.n	8002c5c <std+0x48>
 8002c56:	33d0      	adds	r3, #208	@ 0xd0
 8002c58:	429c      	cmp	r4, r3
 8002c5a:	d105      	bne.n	8002c68 <std+0x54>
 8002c5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c64:	f000 ba58 	b.w	8003118 <__retarget_lock_init_recursive>
 8002c68:	bd10      	pop	{r4, pc}
 8002c6a:	bf00      	nop
 8002c6c:	08002e7d 	.word	0x08002e7d
 8002c70:	08002e9f 	.word	0x08002e9f
 8002c74:	08002ed7 	.word	0x08002ed7
 8002c78:	08002efd 	.word	0x08002efd
 8002c7c:	20000140 	.word	0x20000140

08002c80 <stdio_exit_handler>:
 8002c80:	4a02      	ldr	r2, [pc, #8]	@ (8002c8c <stdio_exit_handler+0xc>)
 8002c82:	4903      	ldr	r1, [pc, #12]	@ (8002c90 <stdio_exit_handler+0x10>)
 8002c84:	4803      	ldr	r0, [pc, #12]	@ (8002c94 <stdio_exit_handler+0x14>)
 8002c86:	f000 b86b 	b.w	8002d60 <_fwalk_sglue>
 8002c8a:	bf00      	nop
 8002c8c:	20000024 	.word	0x20000024
 8002c90:	080039ad 	.word	0x080039ad
 8002c94:	20000034 	.word	0x20000034

08002c98 <cleanup_stdio>:
 8002c98:	6841      	ldr	r1, [r0, #4]
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <cleanup_stdio+0x34>)
 8002c9c:	b510      	push	{r4, lr}
 8002c9e:	4299      	cmp	r1, r3
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	d001      	beq.n	8002ca8 <cleanup_stdio+0x10>
 8002ca4:	f000 fe82 	bl	80039ac <_fflush_r>
 8002ca8:	68a1      	ldr	r1, [r4, #8]
 8002caa:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <cleanup_stdio+0x38>)
 8002cac:	4299      	cmp	r1, r3
 8002cae:	d002      	beq.n	8002cb6 <cleanup_stdio+0x1e>
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f000 fe7b 	bl	80039ac <_fflush_r>
 8002cb6:	68e1      	ldr	r1, [r4, #12]
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <cleanup_stdio+0x3c>)
 8002cba:	4299      	cmp	r1, r3
 8002cbc:	d004      	beq.n	8002cc8 <cleanup_stdio+0x30>
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cc4:	f000 be72 	b.w	80039ac <_fflush_r>
 8002cc8:	bd10      	pop	{r4, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000140 	.word	0x20000140
 8002cd0:	200001a8 	.word	0x200001a8
 8002cd4:	20000210 	.word	0x20000210

08002cd8 <global_stdio_init.part.0>:
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <global_stdio_init.part.0+0x34>)
 8002cda:	4a0d      	ldr	r2, [pc, #52]	@ (8002d10 <global_stdio_init.part.0+0x38>)
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	2104      	movs	r1, #4
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	480c      	ldr	r0, [pc, #48]	@ (8002d14 <global_stdio_init.part.0+0x3c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f7ff ff95 	bl	8002c14 <std>
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <global_stdio_init.part.0+0x3c>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	461c      	mov	r4, r3
 8002cf0:	2109      	movs	r1, #9
 8002cf2:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8002cf6:	f7ff ff8d 	bl	8002c14 <std>
 8002cfa:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002cfe:	2202      	movs	r2, #2
 8002d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d04:	2112      	movs	r1, #18
 8002d06:	f7ff bf85 	b.w	8002c14 <std>
 8002d0a:	bf00      	nop
 8002d0c:	20000278 	.word	0x20000278
 8002d10:	08002c81 	.word	0x08002c81
 8002d14:	20000140 	.word	0x20000140

08002d18 <__sfp_lock_acquire>:
 8002d18:	4801      	ldr	r0, [pc, #4]	@ (8002d20 <__sfp_lock_acquire+0x8>)
 8002d1a:	f000 b9fe 	b.w	800311a <__retarget_lock_acquire_recursive>
 8002d1e:	bf00      	nop
 8002d20:	20000281 	.word	0x20000281

08002d24 <__sfp_lock_release>:
 8002d24:	4801      	ldr	r0, [pc, #4]	@ (8002d2c <__sfp_lock_release+0x8>)
 8002d26:	f000 b9f9 	b.w	800311c <__retarget_lock_release_recursive>
 8002d2a:	bf00      	nop
 8002d2c:	20000281 	.word	0x20000281

08002d30 <__sinit>:
 8002d30:	b510      	push	{r4, lr}
 8002d32:	4604      	mov	r4, r0
 8002d34:	f7ff fff0 	bl	8002d18 <__sfp_lock_acquire>
 8002d38:	6a23      	ldr	r3, [r4, #32]
 8002d3a:	b11b      	cbz	r3, 8002d44 <__sinit+0x14>
 8002d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d40:	f7ff bff0 	b.w	8002d24 <__sfp_lock_release>
 8002d44:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <__sinit+0x28>)
 8002d46:	6223      	str	r3, [r4, #32]
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <__sinit+0x2c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f5      	bne.n	8002d3c <__sinit+0xc>
 8002d50:	f7ff ffc2 	bl	8002cd8 <global_stdio_init.part.0>
 8002d54:	e7f2      	b.n	8002d3c <__sinit+0xc>
 8002d56:	bf00      	nop
 8002d58:	08002c99 	.word	0x08002c99
 8002d5c:	20000278 	.word	0x20000278

08002d60 <_fwalk_sglue>:
 8002d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d64:	4607      	mov	r7, r0
 8002d66:	4688      	mov	r8, r1
 8002d68:	4614      	mov	r4, r2
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d70:	f1b9 0901 	subs.w	r9, r9, #1
 8002d74:	d505      	bpl.n	8002d82 <_fwalk_sglue+0x22>
 8002d76:	6824      	ldr	r4, [r4, #0]
 8002d78:	2c00      	cmp	r4, #0
 8002d7a:	d1f7      	bne.n	8002d6c <_fwalk_sglue+0xc>
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d82:	89ab      	ldrh	r3, [r5, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d907      	bls.n	8002d98 <_fwalk_sglue+0x38>
 8002d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	d003      	beq.n	8002d98 <_fwalk_sglue+0x38>
 8002d90:	4629      	mov	r1, r5
 8002d92:	4638      	mov	r0, r7
 8002d94:	47c0      	blx	r8
 8002d96:	4306      	orrs	r6, r0
 8002d98:	3568      	adds	r5, #104	@ 0x68
 8002d9a:	e7e9      	b.n	8002d70 <_fwalk_sglue+0x10>

08002d9c <iprintf>:
 8002d9c:	b40f      	push	{r0, r1, r2, r3}
 8002d9e:	b507      	push	{r0, r1, r2, lr}
 8002da0:	4906      	ldr	r1, [pc, #24]	@ (8002dbc <iprintf+0x20>)
 8002da2:	ab04      	add	r3, sp, #16
 8002da4:	6808      	ldr	r0, [r1, #0]
 8002da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002daa:	6881      	ldr	r1, [r0, #8]
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	f000 fad5 	bl	800335c <_vfiprintf_r>
 8002db2:	b003      	add	sp, #12
 8002db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002db8:	b004      	add	sp, #16
 8002dba:	4770      	bx	lr
 8002dbc:	20000030 	.word	0x20000030

08002dc0 <_puts_r>:
 8002dc0:	6a03      	ldr	r3, [r0, #32]
 8002dc2:	b570      	push	{r4, r5, r6, lr}
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	460e      	mov	r6, r1
 8002dc8:	6884      	ldr	r4, [r0, #8]
 8002dca:	b90b      	cbnz	r3, 8002dd0 <_puts_r+0x10>
 8002dcc:	f7ff ffb0 	bl	8002d30 <__sinit>
 8002dd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dd2:	07db      	lsls	r3, r3, #31
 8002dd4:	d405      	bmi.n	8002de2 <_puts_r+0x22>
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	0598      	lsls	r0, r3, #22
 8002dda:	d402      	bmi.n	8002de2 <_puts_r+0x22>
 8002ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dde:	f000 f99c 	bl	800311a <__retarget_lock_acquire_recursive>
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	0719      	lsls	r1, r3, #28
 8002de6:	d502      	bpl.n	8002dee <_puts_r+0x2e>
 8002de8:	6923      	ldr	r3, [r4, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d135      	bne.n	8002e5a <_puts_r+0x9a>
 8002dee:	4621      	mov	r1, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 f8c5 	bl	8002f80 <__swsetup_r>
 8002df6:	b380      	cbz	r0, 8002e5a <_puts_r+0x9a>
 8002df8:	f04f 35ff 	mov.w	r5, #4294967295
 8002dfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dfe:	07da      	lsls	r2, r3, #31
 8002e00:	d405      	bmi.n	8002e0e <_puts_r+0x4e>
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	059b      	lsls	r3, r3, #22
 8002e06:	d402      	bmi.n	8002e0e <_puts_r+0x4e>
 8002e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e0a:	f000 f987 	bl	800311c <__retarget_lock_release_recursive>
 8002e0e:	4628      	mov	r0, r5
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da04      	bge.n	8002e20 <_puts_r+0x60>
 8002e16:	69a2      	ldr	r2, [r4, #24]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	db17      	blt.n	8002e4c <_puts_r+0x8c>
 8002e1c:	290a      	cmp	r1, #10
 8002e1e:	d015      	beq.n	8002e4c <_puts_r+0x8c>
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	6022      	str	r2, [r4, #0]
 8002e26:	7019      	strb	r1, [r3, #0]
 8002e28:	68a3      	ldr	r3, [r4, #8]
 8002e2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	60a3      	str	r3, [r4, #8]
 8002e32:	2900      	cmp	r1, #0
 8002e34:	d1ed      	bne.n	8002e12 <_puts_r+0x52>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da11      	bge.n	8002e5e <_puts_r+0x9e>
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	210a      	movs	r1, #10
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f000 f860 	bl	8002f04 <__swbuf_r>
 8002e44:	3001      	adds	r0, #1
 8002e46:	d0d7      	beq.n	8002df8 <_puts_r+0x38>
 8002e48:	250a      	movs	r5, #10
 8002e4a:	e7d7      	b.n	8002dfc <_puts_r+0x3c>
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	4628      	mov	r0, r5
 8002e50:	f000 f858 	bl	8002f04 <__swbuf_r>
 8002e54:	3001      	adds	r0, #1
 8002e56:	d1e7      	bne.n	8002e28 <_puts_r+0x68>
 8002e58:	e7ce      	b.n	8002df8 <_puts_r+0x38>
 8002e5a:	3e01      	subs	r6, #1
 8002e5c:	e7e4      	b.n	8002e28 <_puts_r+0x68>
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	6022      	str	r2, [r4, #0]
 8002e64:	220a      	movs	r2, #10
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e7ee      	b.n	8002e48 <_puts_r+0x88>
	...

08002e6c <puts>:
 8002e6c:	4b02      	ldr	r3, [pc, #8]	@ (8002e78 <puts+0xc>)
 8002e6e:	4601      	mov	r1, r0
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	f7ff bfa5 	b.w	8002dc0 <_puts_r>
 8002e76:	bf00      	nop
 8002e78:	20000030 	.word	0x20000030

08002e7c <__sread>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	460c      	mov	r4, r1
 8002e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e84:	f000 f8fa 	bl	800307c <_read_r>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	bfab      	itete	ge
 8002e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e90:	181b      	addge	r3, r3, r0
 8002e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e96:	bfac      	ite	ge
 8002e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e9a:	81a3      	strhlt	r3, [r4, #12]
 8002e9c:	bd10      	pop	{r4, pc}

08002e9e <__swrite>:
 8002e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea2:	461f      	mov	r7, r3
 8002ea4:	898b      	ldrh	r3, [r1, #12]
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	05db      	lsls	r3, r3, #23
 8002eaa:	460c      	mov	r4, r1
 8002eac:	4616      	mov	r6, r2
 8002eae:	d505      	bpl.n	8002ebc <__swrite+0x1e>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb8:	f000 f8ce 	bl	8003058 <_lseek_r>
 8002ebc:	89a3      	ldrh	r3, [r4, #12]
 8002ebe:	4632      	mov	r2, r6
 8002ec0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ec4:	81a3      	strh	r3, [r4, #12]
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	463b      	mov	r3, r7
 8002eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed2:	f000 b8e5 	b.w	80030a0 <_write_r>

08002ed6 <__sseek>:
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	460c      	mov	r4, r1
 8002eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ede:	f000 f8bb 	bl	8003058 <_lseek_r>
 8002ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee6:	1c42      	adds	r2, r0, #1
 8002ee8:	bf0b      	itete	eq
 8002eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ef2:	81a3      	strheq	r3, [r4, #12]
 8002ef4:	81a3      	strhne	r3, [r4, #12]
 8002ef6:	bf18      	it	ne
 8002ef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002efa:	bd10      	pop	{r4, pc}

08002efc <__sclose>:
 8002efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f00:	f000 b89a 	b.w	8003038 <_close_r>

08002f04 <__swbuf_r>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	460e      	mov	r6, r1
 8002f08:	4614      	mov	r4, r2
 8002f0a:	4605      	mov	r5, r0
 8002f0c:	b118      	cbz	r0, 8002f16 <__swbuf_r+0x12>
 8002f0e:	6a03      	ldr	r3, [r0, #32]
 8002f10:	b90b      	cbnz	r3, 8002f16 <__swbuf_r+0x12>
 8002f12:	f7ff ff0d 	bl	8002d30 <__sinit>
 8002f16:	69a3      	ldr	r3, [r4, #24]
 8002f18:	60a3      	str	r3, [r4, #8]
 8002f1a:	89a3      	ldrh	r3, [r4, #12]
 8002f1c:	071a      	lsls	r2, r3, #28
 8002f1e:	d501      	bpl.n	8002f24 <__swbuf_r+0x20>
 8002f20:	6923      	ldr	r3, [r4, #16]
 8002f22:	b943      	cbnz	r3, 8002f36 <__swbuf_r+0x32>
 8002f24:	4621      	mov	r1, r4
 8002f26:	4628      	mov	r0, r5
 8002f28:	f000 f82a 	bl	8002f80 <__swsetup_r>
 8002f2c:	b118      	cbz	r0, 8002f36 <__swbuf_r+0x32>
 8002f2e:	f04f 37ff 	mov.w	r7, #4294967295
 8002f32:	4638      	mov	r0, r7
 8002f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	6922      	ldr	r2, [r4, #16]
 8002f3a:	b2f6      	uxtb	r6, r6
 8002f3c:	1a98      	subs	r0, r3, r2
 8002f3e:	6963      	ldr	r3, [r4, #20]
 8002f40:	4637      	mov	r7, r6
 8002f42:	4283      	cmp	r3, r0
 8002f44:	dc05      	bgt.n	8002f52 <__swbuf_r+0x4e>
 8002f46:	4621      	mov	r1, r4
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f000 fd2f 	bl	80039ac <_fflush_r>
 8002f4e:	2800      	cmp	r0, #0
 8002f50:	d1ed      	bne.n	8002f2e <__swbuf_r+0x2a>
 8002f52:	68a3      	ldr	r3, [r4, #8]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	60a3      	str	r3, [r4, #8]
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	6022      	str	r2, [r4, #0]
 8002f5e:	701e      	strb	r6, [r3, #0]
 8002f60:	6962      	ldr	r2, [r4, #20]
 8002f62:	1c43      	adds	r3, r0, #1
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d004      	beq.n	8002f72 <__swbuf_r+0x6e>
 8002f68:	89a3      	ldrh	r3, [r4, #12]
 8002f6a:	07db      	lsls	r3, r3, #31
 8002f6c:	d5e1      	bpl.n	8002f32 <__swbuf_r+0x2e>
 8002f6e:	2e0a      	cmp	r6, #10
 8002f70:	d1df      	bne.n	8002f32 <__swbuf_r+0x2e>
 8002f72:	4621      	mov	r1, r4
 8002f74:	4628      	mov	r0, r5
 8002f76:	f000 fd19 	bl	80039ac <_fflush_r>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d0d9      	beq.n	8002f32 <__swbuf_r+0x2e>
 8002f7e:	e7d6      	b.n	8002f2e <__swbuf_r+0x2a>

08002f80 <__swsetup_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <__swsetup_r+0xa4>)
 8002f84:	4605      	mov	r5, r0
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	460c      	mov	r4, r1
 8002f8a:	b118      	cbz	r0, 8002f94 <__swsetup_r+0x14>
 8002f8c:	6a03      	ldr	r3, [r0, #32]
 8002f8e:	b90b      	cbnz	r3, 8002f94 <__swsetup_r+0x14>
 8002f90:	f7ff fece 	bl	8002d30 <__sinit>
 8002f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f98:	071a      	lsls	r2, r3, #28
 8002f9a:	d421      	bmi.n	8002fe0 <__swsetup_r+0x60>
 8002f9c:	06d8      	lsls	r0, r3, #27
 8002f9e:	d407      	bmi.n	8002fb0 <__swsetup_r+0x30>
 8002fa0:	2209      	movs	r2, #9
 8002fa2:	602a      	str	r2, [r5, #0]
 8002fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	81a3      	strh	r3, [r4, #12]
 8002fae:	e030      	b.n	8003012 <__swsetup_r+0x92>
 8002fb0:	0759      	lsls	r1, r3, #29
 8002fb2:	d512      	bpl.n	8002fda <__swsetup_r+0x5a>
 8002fb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fb6:	b141      	cbz	r1, 8002fca <__swsetup_r+0x4a>
 8002fb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fbc:	4299      	cmp	r1, r3
 8002fbe:	d002      	beq.n	8002fc6 <__swsetup_r+0x46>
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f000 f8ad 	bl	8003120 <_free_r>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fd0:	6062      	str	r2, [r4, #4]
 8002fd2:	6922      	ldr	r2, [r4, #16]
 8002fd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fd8:	6022      	str	r2, [r4, #0]
 8002fda:	f043 0308 	orr.w	r3, r3, #8
 8002fde:	81a3      	strh	r3, [r4, #12]
 8002fe0:	6922      	ldr	r2, [r4, #16]
 8002fe2:	b93a      	cbnz	r2, 8002ff4 <__swsetup_r+0x74>
 8002fe4:	059a      	lsls	r2, r3, #22
 8002fe6:	d501      	bpl.n	8002fec <__swsetup_r+0x6c>
 8002fe8:	0618      	lsls	r0, r3, #24
 8002fea:	d503      	bpl.n	8002ff4 <__swsetup_r+0x74>
 8002fec:	4621      	mov	r1, r4
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f000 fd28 	bl	8003a44 <__smakebuf_r>
 8002ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ff8:	f013 0201 	ands.w	r2, r3, #1
 8002ffc:	d00a      	beq.n	8003014 <__swsetup_r+0x94>
 8002ffe:	2200      	movs	r2, #0
 8003000:	60a2      	str	r2, [r4, #8]
 8003002:	6962      	ldr	r2, [r4, #20]
 8003004:	4252      	negs	r2, r2
 8003006:	61a2      	str	r2, [r4, #24]
 8003008:	6922      	ldr	r2, [r4, #16]
 800300a:	b942      	cbnz	r2, 800301e <__swsetup_r+0x9e>
 800300c:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003010:	d1c8      	bne.n	8002fa4 <__swsetup_r+0x24>
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	0799      	lsls	r1, r3, #30
 8003016:	bf58      	it	pl
 8003018:	6962      	ldrpl	r2, [r4, #20]
 800301a:	60a2      	str	r2, [r4, #8]
 800301c:	e7f4      	b.n	8003008 <__swsetup_r+0x88>
 800301e:	2000      	movs	r0, #0
 8003020:	e7f7      	b.n	8003012 <__swsetup_r+0x92>
 8003022:	bf00      	nop
 8003024:	20000030 	.word	0x20000030

08003028 <memset>:
 8003028:	4603      	mov	r3, r0
 800302a:	4402      	add	r2, r0
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	f803 1b01 	strb.w	r1, [r3], #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <_close_r>:
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	2300      	movs	r3, #0
 800303c:	4d05      	ldr	r5, [pc, #20]	@ (8003054 <_close_r+0x1c>)
 800303e:	4604      	mov	r4, r0
 8003040:	4608      	mov	r0, r1
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	f7ff fd30 	bl	8002aa8 <_close>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_close_r+0x1a>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	b103      	cbz	r3, 8003052 <_close_r+0x1a>
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	2000027c 	.word	0x2000027c

08003058 <_lseek_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	4604      	mov	r4, r0
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	2200      	movs	r2, #0
 8003062:	4d05      	ldr	r5, [pc, #20]	@ (8003078 <_lseek_r+0x20>)
 8003064:	602a      	str	r2, [r5, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	f7ff fd28 	bl	8002abc <_lseek>
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	d102      	bne.n	8003076 <_lseek_r+0x1e>
 8003070:	682b      	ldr	r3, [r5, #0]
 8003072:	b103      	cbz	r3, 8003076 <_lseek_r+0x1e>
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	bd38      	pop	{r3, r4, r5, pc}
 8003078:	2000027c 	.word	0x2000027c

0800307c <_read_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4604      	mov	r4, r0
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	2200      	movs	r2, #0
 8003086:	4d05      	ldr	r5, [pc, #20]	@ (800309c <_read_r+0x20>)
 8003088:	602a      	str	r2, [r5, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	f7ff fcfc 	bl	8002a88 <_read>
 8003090:	1c43      	adds	r3, r0, #1
 8003092:	d102      	bne.n	800309a <_read_r+0x1e>
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	b103      	cbz	r3, 800309a <_read_r+0x1e>
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	bd38      	pop	{r3, r4, r5, pc}
 800309c:	2000027c 	.word	0x2000027c

080030a0 <_write_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	4604      	mov	r4, r0
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	2200      	movs	r2, #0
 80030aa:	4d05      	ldr	r5, [pc, #20]	@ (80030c0 <_write_r+0x20>)
 80030ac:	602a      	str	r2, [r5, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f7fd ff94 	bl	8000fdc <_write>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d102      	bne.n	80030be <_write_r+0x1e>
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	b103      	cbz	r3, 80030be <_write_r+0x1e>
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	bd38      	pop	{r3, r4, r5, pc}
 80030c0:	2000027c 	.word	0x2000027c

080030c4 <__errno>:
 80030c4:	4b01      	ldr	r3, [pc, #4]	@ (80030cc <__errno+0x8>)
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000030 	.word	0x20000030

080030d0 <__libc_init_array>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	2600      	movs	r6, #0
 80030d4:	4d0c      	ldr	r5, [pc, #48]	@ (8003108 <__libc_init_array+0x38>)
 80030d6:	4b0d      	ldr	r3, [pc, #52]	@ (800310c <__libc_init_array+0x3c>)
 80030d8:	1b5b      	subs	r3, r3, r5
 80030da:	109c      	asrs	r4, r3, #2
 80030dc:	42a6      	cmp	r6, r4
 80030de:	d109      	bne.n	80030f4 <__libc_init_array+0x24>
 80030e0:	2600      	movs	r6, #0
 80030e2:	f000 fd29 	bl	8003b38 <_init>
 80030e6:	4d0a      	ldr	r5, [pc, #40]	@ (8003110 <__libc_init_array+0x40>)
 80030e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <__libc_init_array+0x44>)
 80030ea:	1b5b      	subs	r3, r3, r5
 80030ec:	109c      	asrs	r4, r3, #2
 80030ee:	42a6      	cmp	r6, r4
 80030f0:	d105      	bne.n	80030fe <__libc_init_array+0x2e>
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f8:	4798      	blx	r3
 80030fa:	3601      	adds	r6, #1
 80030fc:	e7ee      	b.n	80030dc <__libc_init_array+0xc>
 80030fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003102:	4798      	blx	r3
 8003104:	3601      	adds	r6, #1
 8003106:	e7f2      	b.n	80030ee <__libc_init_array+0x1e>
 8003108:	08003dc4 	.word	0x08003dc4
 800310c:	08003dc4 	.word	0x08003dc4
 8003110:	08003dc4 	.word	0x08003dc4
 8003114:	08003dc8 	.word	0x08003dc8

08003118 <__retarget_lock_init_recursive>:
 8003118:	4770      	bx	lr

0800311a <__retarget_lock_acquire_recursive>:
 800311a:	4770      	bx	lr

0800311c <__retarget_lock_release_recursive>:
 800311c:	4770      	bx	lr
	...

08003120 <_free_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4605      	mov	r5, r0
 8003124:	2900      	cmp	r1, #0
 8003126:	d040      	beq.n	80031aa <_free_r+0x8a>
 8003128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800312c:	1f0c      	subs	r4, r1, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	bfb8      	it	lt
 8003132:	18e4      	addlt	r4, r4, r3
 8003134:	f000 f8de 	bl	80032f4 <__malloc_lock>
 8003138:	4a1c      	ldr	r2, [pc, #112]	@ (80031ac <_free_r+0x8c>)
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	b933      	cbnz	r3, 800314c <_free_r+0x2c>
 800313e:	6063      	str	r3, [r4, #4]
 8003140:	6014      	str	r4, [r2, #0]
 8003142:	4628      	mov	r0, r5
 8003144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003148:	f000 b8da 	b.w	8003300 <__malloc_unlock>
 800314c:	42a3      	cmp	r3, r4
 800314e:	d908      	bls.n	8003162 <_free_r+0x42>
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	1821      	adds	r1, r4, r0
 8003154:	428b      	cmp	r3, r1
 8003156:	bf01      	itttt	eq
 8003158:	6819      	ldreq	r1, [r3, #0]
 800315a:	685b      	ldreq	r3, [r3, #4]
 800315c:	1809      	addeq	r1, r1, r0
 800315e:	6021      	streq	r1, [r4, #0]
 8003160:	e7ed      	b.n	800313e <_free_r+0x1e>
 8003162:	461a      	mov	r2, r3
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	b10b      	cbz	r3, 800316c <_free_r+0x4c>
 8003168:	42a3      	cmp	r3, r4
 800316a:	d9fa      	bls.n	8003162 <_free_r+0x42>
 800316c:	6811      	ldr	r1, [r2, #0]
 800316e:	1850      	adds	r0, r2, r1
 8003170:	42a0      	cmp	r0, r4
 8003172:	d10b      	bne.n	800318c <_free_r+0x6c>
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	4401      	add	r1, r0
 8003178:	1850      	adds	r0, r2, r1
 800317a:	4283      	cmp	r3, r0
 800317c:	6011      	str	r1, [r2, #0]
 800317e:	d1e0      	bne.n	8003142 <_free_r+0x22>
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4408      	add	r0, r1
 8003186:	6010      	str	r0, [r2, #0]
 8003188:	6053      	str	r3, [r2, #4]
 800318a:	e7da      	b.n	8003142 <_free_r+0x22>
 800318c:	d902      	bls.n	8003194 <_free_r+0x74>
 800318e:	230c      	movs	r3, #12
 8003190:	602b      	str	r3, [r5, #0]
 8003192:	e7d6      	b.n	8003142 <_free_r+0x22>
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	1821      	adds	r1, r4, r0
 8003198:	428b      	cmp	r3, r1
 800319a:	bf01      	itttt	eq
 800319c:	6819      	ldreq	r1, [r3, #0]
 800319e:	685b      	ldreq	r3, [r3, #4]
 80031a0:	1809      	addeq	r1, r1, r0
 80031a2:	6021      	streq	r1, [r4, #0]
 80031a4:	6063      	str	r3, [r4, #4]
 80031a6:	6054      	str	r4, [r2, #4]
 80031a8:	e7cb      	b.n	8003142 <_free_r+0x22>
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
 80031ac:	20000288 	.word	0x20000288

080031b0 <sbrk_aligned>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4e0f      	ldr	r6, [pc, #60]	@ (80031f0 <sbrk_aligned+0x40>)
 80031b4:	460c      	mov	r4, r1
 80031b6:	6831      	ldr	r1, [r6, #0]
 80031b8:	4605      	mov	r5, r0
 80031ba:	b911      	cbnz	r1, 80031c2 <sbrk_aligned+0x12>
 80031bc:	f000 fc9e 	bl	8003afc <_sbrk_r>
 80031c0:	6030      	str	r0, [r6, #0]
 80031c2:	4621      	mov	r1, r4
 80031c4:	4628      	mov	r0, r5
 80031c6:	f000 fc99 	bl	8003afc <_sbrk_r>
 80031ca:	1c43      	adds	r3, r0, #1
 80031cc:	d103      	bne.n	80031d6 <sbrk_aligned+0x26>
 80031ce:	f04f 34ff 	mov.w	r4, #4294967295
 80031d2:	4620      	mov	r0, r4
 80031d4:	bd70      	pop	{r4, r5, r6, pc}
 80031d6:	1cc4      	adds	r4, r0, #3
 80031d8:	f024 0403 	bic.w	r4, r4, #3
 80031dc:	42a0      	cmp	r0, r4
 80031de:	d0f8      	beq.n	80031d2 <sbrk_aligned+0x22>
 80031e0:	1a21      	subs	r1, r4, r0
 80031e2:	4628      	mov	r0, r5
 80031e4:	f000 fc8a 	bl	8003afc <_sbrk_r>
 80031e8:	3001      	adds	r0, #1
 80031ea:	d1f2      	bne.n	80031d2 <sbrk_aligned+0x22>
 80031ec:	e7ef      	b.n	80031ce <sbrk_aligned+0x1e>
 80031ee:	bf00      	nop
 80031f0:	20000284 	.word	0x20000284

080031f4 <_malloc_r>:
 80031f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031f8:	1ccd      	adds	r5, r1, #3
 80031fa:	f025 0503 	bic.w	r5, r5, #3
 80031fe:	3508      	adds	r5, #8
 8003200:	2d0c      	cmp	r5, #12
 8003202:	bf38      	it	cc
 8003204:	250c      	movcc	r5, #12
 8003206:	2d00      	cmp	r5, #0
 8003208:	4606      	mov	r6, r0
 800320a:	db01      	blt.n	8003210 <_malloc_r+0x1c>
 800320c:	42a9      	cmp	r1, r5
 800320e:	d904      	bls.n	800321a <_malloc_r+0x26>
 8003210:	230c      	movs	r3, #12
 8003212:	6033      	str	r3, [r6, #0]
 8003214:	2000      	movs	r0, #0
 8003216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800321a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032f0 <_malloc_r+0xfc>
 800321e:	f000 f869 	bl	80032f4 <__malloc_lock>
 8003222:	f8d8 3000 	ldr.w	r3, [r8]
 8003226:	461c      	mov	r4, r3
 8003228:	bb44      	cbnz	r4, 800327c <_malloc_r+0x88>
 800322a:	4629      	mov	r1, r5
 800322c:	4630      	mov	r0, r6
 800322e:	f7ff ffbf 	bl	80031b0 <sbrk_aligned>
 8003232:	1c43      	adds	r3, r0, #1
 8003234:	4604      	mov	r4, r0
 8003236:	d158      	bne.n	80032ea <_malloc_r+0xf6>
 8003238:	f8d8 4000 	ldr.w	r4, [r8]
 800323c:	4627      	mov	r7, r4
 800323e:	2f00      	cmp	r7, #0
 8003240:	d143      	bne.n	80032ca <_malloc_r+0xd6>
 8003242:	2c00      	cmp	r4, #0
 8003244:	d04b      	beq.n	80032de <_malloc_r+0xea>
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	4639      	mov	r1, r7
 800324a:	4630      	mov	r0, r6
 800324c:	eb04 0903 	add.w	r9, r4, r3
 8003250:	f000 fc54 	bl	8003afc <_sbrk_r>
 8003254:	4581      	cmp	r9, r0
 8003256:	d142      	bne.n	80032de <_malloc_r+0xea>
 8003258:	6821      	ldr	r1, [r4, #0]
 800325a:	4630      	mov	r0, r6
 800325c:	1a6d      	subs	r5, r5, r1
 800325e:	4629      	mov	r1, r5
 8003260:	f7ff ffa6 	bl	80031b0 <sbrk_aligned>
 8003264:	3001      	adds	r0, #1
 8003266:	d03a      	beq.n	80032de <_malloc_r+0xea>
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	442b      	add	r3, r5
 800326c:	6023      	str	r3, [r4, #0]
 800326e:	f8d8 3000 	ldr.w	r3, [r8]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	bb62      	cbnz	r2, 80032d0 <_malloc_r+0xdc>
 8003276:	f8c8 7000 	str.w	r7, [r8]
 800327a:	e00f      	b.n	800329c <_malloc_r+0xa8>
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	1b52      	subs	r2, r2, r5
 8003280:	d420      	bmi.n	80032c4 <_malloc_r+0xd0>
 8003282:	2a0b      	cmp	r2, #11
 8003284:	d917      	bls.n	80032b6 <_malloc_r+0xc2>
 8003286:	1961      	adds	r1, r4, r5
 8003288:	42a3      	cmp	r3, r4
 800328a:	6025      	str	r5, [r4, #0]
 800328c:	bf18      	it	ne
 800328e:	6059      	strne	r1, [r3, #4]
 8003290:	6863      	ldr	r3, [r4, #4]
 8003292:	bf08      	it	eq
 8003294:	f8c8 1000 	streq.w	r1, [r8]
 8003298:	5162      	str	r2, [r4, r5]
 800329a:	604b      	str	r3, [r1, #4]
 800329c:	4630      	mov	r0, r6
 800329e:	f000 f82f 	bl	8003300 <__malloc_unlock>
 80032a2:	f104 000b 	add.w	r0, r4, #11
 80032a6:	1d23      	adds	r3, r4, #4
 80032a8:	f020 0007 	bic.w	r0, r0, #7
 80032ac:	1ac2      	subs	r2, r0, r3
 80032ae:	bf1c      	itt	ne
 80032b0:	1a1b      	subne	r3, r3, r0
 80032b2:	50a3      	strne	r3, [r4, r2]
 80032b4:	e7af      	b.n	8003216 <_malloc_r+0x22>
 80032b6:	6862      	ldr	r2, [r4, #4]
 80032b8:	42a3      	cmp	r3, r4
 80032ba:	bf0c      	ite	eq
 80032bc:	f8c8 2000 	streq.w	r2, [r8]
 80032c0:	605a      	strne	r2, [r3, #4]
 80032c2:	e7eb      	b.n	800329c <_malloc_r+0xa8>
 80032c4:	4623      	mov	r3, r4
 80032c6:	6864      	ldr	r4, [r4, #4]
 80032c8:	e7ae      	b.n	8003228 <_malloc_r+0x34>
 80032ca:	463c      	mov	r4, r7
 80032cc:	687f      	ldr	r7, [r7, #4]
 80032ce:	e7b6      	b.n	800323e <_malloc_r+0x4a>
 80032d0:	461a      	mov	r2, r3
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	d1fb      	bne.n	80032d0 <_malloc_r+0xdc>
 80032d8:	2300      	movs	r3, #0
 80032da:	6053      	str	r3, [r2, #4]
 80032dc:	e7de      	b.n	800329c <_malloc_r+0xa8>
 80032de:	230c      	movs	r3, #12
 80032e0:	4630      	mov	r0, r6
 80032e2:	6033      	str	r3, [r6, #0]
 80032e4:	f000 f80c 	bl	8003300 <__malloc_unlock>
 80032e8:	e794      	b.n	8003214 <_malloc_r+0x20>
 80032ea:	6005      	str	r5, [r0, #0]
 80032ec:	e7d6      	b.n	800329c <_malloc_r+0xa8>
 80032ee:	bf00      	nop
 80032f0:	20000288 	.word	0x20000288

080032f4 <__malloc_lock>:
 80032f4:	4801      	ldr	r0, [pc, #4]	@ (80032fc <__malloc_lock+0x8>)
 80032f6:	f7ff bf10 	b.w	800311a <__retarget_lock_acquire_recursive>
 80032fa:	bf00      	nop
 80032fc:	20000280 	.word	0x20000280

08003300 <__malloc_unlock>:
 8003300:	4801      	ldr	r0, [pc, #4]	@ (8003308 <__malloc_unlock+0x8>)
 8003302:	f7ff bf0b 	b.w	800311c <__retarget_lock_release_recursive>
 8003306:	bf00      	nop
 8003308:	20000280 	.word	0x20000280

0800330c <__sfputc_r>:
 800330c:	6893      	ldr	r3, [r2, #8]
 800330e:	b410      	push	{r4}
 8003310:	3b01      	subs	r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	6093      	str	r3, [r2, #8]
 8003316:	da07      	bge.n	8003328 <__sfputc_r+0x1c>
 8003318:	6994      	ldr	r4, [r2, #24]
 800331a:	42a3      	cmp	r3, r4
 800331c:	db01      	blt.n	8003322 <__sfputc_r+0x16>
 800331e:	290a      	cmp	r1, #10
 8003320:	d102      	bne.n	8003328 <__sfputc_r+0x1c>
 8003322:	bc10      	pop	{r4}
 8003324:	f7ff bdee 	b.w	8002f04 <__swbuf_r>
 8003328:	6813      	ldr	r3, [r2, #0]
 800332a:	1c58      	adds	r0, r3, #1
 800332c:	6010      	str	r0, [r2, #0]
 800332e:	7019      	strb	r1, [r3, #0]
 8003330:	4608      	mov	r0, r1
 8003332:	bc10      	pop	{r4}
 8003334:	4770      	bx	lr

08003336 <__sfputs_r>:
 8003336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003338:	4606      	mov	r6, r0
 800333a:	460f      	mov	r7, r1
 800333c:	4614      	mov	r4, r2
 800333e:	18d5      	adds	r5, r2, r3
 8003340:	42ac      	cmp	r4, r5
 8003342:	d101      	bne.n	8003348 <__sfputs_r+0x12>
 8003344:	2000      	movs	r0, #0
 8003346:	e007      	b.n	8003358 <__sfputs_r+0x22>
 8003348:	463a      	mov	r2, r7
 800334a:	4630      	mov	r0, r6
 800334c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003350:	f7ff ffdc 	bl	800330c <__sfputc_r>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d1f3      	bne.n	8003340 <__sfputs_r+0xa>
 8003358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800335c <_vfiprintf_r>:
 800335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003360:	460d      	mov	r5, r1
 8003362:	4614      	mov	r4, r2
 8003364:	4698      	mov	r8, r3
 8003366:	4606      	mov	r6, r0
 8003368:	b09d      	sub	sp, #116	@ 0x74
 800336a:	b118      	cbz	r0, 8003374 <_vfiprintf_r+0x18>
 800336c:	6a03      	ldr	r3, [r0, #32]
 800336e:	b90b      	cbnz	r3, 8003374 <_vfiprintf_r+0x18>
 8003370:	f7ff fcde 	bl	8002d30 <__sinit>
 8003374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003376:	07d9      	lsls	r1, r3, #31
 8003378:	d405      	bmi.n	8003386 <_vfiprintf_r+0x2a>
 800337a:	89ab      	ldrh	r3, [r5, #12]
 800337c:	059a      	lsls	r2, r3, #22
 800337e:	d402      	bmi.n	8003386 <_vfiprintf_r+0x2a>
 8003380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003382:	f7ff feca 	bl	800311a <__retarget_lock_acquire_recursive>
 8003386:	89ab      	ldrh	r3, [r5, #12]
 8003388:	071b      	lsls	r3, r3, #28
 800338a:	d501      	bpl.n	8003390 <_vfiprintf_r+0x34>
 800338c:	692b      	ldr	r3, [r5, #16]
 800338e:	b99b      	cbnz	r3, 80033b8 <_vfiprintf_r+0x5c>
 8003390:	4629      	mov	r1, r5
 8003392:	4630      	mov	r0, r6
 8003394:	f7ff fdf4 	bl	8002f80 <__swsetup_r>
 8003398:	b170      	cbz	r0, 80033b8 <_vfiprintf_r+0x5c>
 800339a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800339c:	07dc      	lsls	r4, r3, #31
 800339e:	d504      	bpl.n	80033aa <_vfiprintf_r+0x4e>
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	b01d      	add	sp, #116	@ 0x74
 80033a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033aa:	89ab      	ldrh	r3, [r5, #12]
 80033ac:	0598      	lsls	r0, r3, #22
 80033ae:	d4f7      	bmi.n	80033a0 <_vfiprintf_r+0x44>
 80033b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033b2:	f7ff feb3 	bl	800311c <__retarget_lock_release_recursive>
 80033b6:	e7f3      	b.n	80033a0 <_vfiprintf_r+0x44>
 80033b8:	2300      	movs	r3, #0
 80033ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80033bc:	2320      	movs	r3, #32
 80033be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033c2:	2330      	movs	r3, #48	@ 0x30
 80033c4:	f04f 0901 	mov.w	r9, #1
 80033c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80033cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003578 <_vfiprintf_r+0x21c>
 80033d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033d4:	4623      	mov	r3, r4
 80033d6:	469a      	mov	sl, r3
 80033d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033dc:	b10a      	cbz	r2, 80033e2 <_vfiprintf_r+0x86>
 80033de:	2a25      	cmp	r2, #37	@ 0x25
 80033e0:	d1f9      	bne.n	80033d6 <_vfiprintf_r+0x7a>
 80033e2:	ebba 0b04 	subs.w	fp, sl, r4
 80033e6:	d00b      	beq.n	8003400 <_vfiprintf_r+0xa4>
 80033e8:	465b      	mov	r3, fp
 80033ea:	4622      	mov	r2, r4
 80033ec:	4629      	mov	r1, r5
 80033ee:	4630      	mov	r0, r6
 80033f0:	f7ff ffa1 	bl	8003336 <__sfputs_r>
 80033f4:	3001      	adds	r0, #1
 80033f6:	f000 80a7 	beq.w	8003548 <_vfiprintf_r+0x1ec>
 80033fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033fc:	445a      	add	r2, fp
 80033fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8003400:	f89a 3000 	ldrb.w	r3, [sl]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 809f 	beq.w	8003548 <_vfiprintf_r+0x1ec>
 800340a:	2300      	movs	r3, #0
 800340c:	f04f 32ff 	mov.w	r2, #4294967295
 8003410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003414:	f10a 0a01 	add.w	sl, sl, #1
 8003418:	9304      	str	r3, [sp, #16]
 800341a:	9307      	str	r3, [sp, #28]
 800341c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003420:	931a      	str	r3, [sp, #104]	@ 0x68
 8003422:	4654      	mov	r4, sl
 8003424:	2205      	movs	r2, #5
 8003426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800342a:	4853      	ldr	r0, [pc, #332]	@ (8003578 <_vfiprintf_r+0x21c>)
 800342c:	f000 fb76 	bl	8003b1c <memchr>
 8003430:	9a04      	ldr	r2, [sp, #16]
 8003432:	b9d8      	cbnz	r0, 800346c <_vfiprintf_r+0x110>
 8003434:	06d1      	lsls	r1, r2, #27
 8003436:	bf44      	itt	mi
 8003438:	2320      	movmi	r3, #32
 800343a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800343e:	0713      	lsls	r3, r2, #28
 8003440:	bf44      	itt	mi
 8003442:	232b      	movmi	r3, #43	@ 0x2b
 8003444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003448:	f89a 3000 	ldrb.w	r3, [sl]
 800344c:	2b2a      	cmp	r3, #42	@ 0x2a
 800344e:	d015      	beq.n	800347c <_vfiprintf_r+0x120>
 8003450:	4654      	mov	r4, sl
 8003452:	2000      	movs	r0, #0
 8003454:	f04f 0c0a 	mov.w	ip, #10
 8003458:	9a07      	ldr	r2, [sp, #28]
 800345a:	4621      	mov	r1, r4
 800345c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003460:	3b30      	subs	r3, #48	@ 0x30
 8003462:	2b09      	cmp	r3, #9
 8003464:	d94b      	bls.n	80034fe <_vfiprintf_r+0x1a2>
 8003466:	b1b0      	cbz	r0, 8003496 <_vfiprintf_r+0x13a>
 8003468:	9207      	str	r2, [sp, #28]
 800346a:	e014      	b.n	8003496 <_vfiprintf_r+0x13a>
 800346c:	eba0 0308 	sub.w	r3, r0, r8
 8003470:	fa09 f303 	lsl.w	r3, r9, r3
 8003474:	4313      	orrs	r3, r2
 8003476:	46a2      	mov	sl, r4
 8003478:	9304      	str	r3, [sp, #16]
 800347a:	e7d2      	b.n	8003422 <_vfiprintf_r+0xc6>
 800347c:	9b03      	ldr	r3, [sp, #12]
 800347e:	1d19      	adds	r1, r3, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	9103      	str	r1, [sp, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	bfbb      	ittet	lt
 8003488:	425b      	neglt	r3, r3
 800348a:	f042 0202 	orrlt.w	r2, r2, #2
 800348e:	9307      	strge	r3, [sp, #28]
 8003490:	9307      	strlt	r3, [sp, #28]
 8003492:	bfb8      	it	lt
 8003494:	9204      	strlt	r2, [sp, #16]
 8003496:	7823      	ldrb	r3, [r4, #0]
 8003498:	2b2e      	cmp	r3, #46	@ 0x2e
 800349a:	d10a      	bne.n	80034b2 <_vfiprintf_r+0x156>
 800349c:	7863      	ldrb	r3, [r4, #1]
 800349e:	2b2a      	cmp	r3, #42	@ 0x2a
 80034a0:	d132      	bne.n	8003508 <_vfiprintf_r+0x1ac>
 80034a2:	9b03      	ldr	r3, [sp, #12]
 80034a4:	3402      	adds	r4, #2
 80034a6:	1d1a      	adds	r2, r3, #4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	9203      	str	r2, [sp, #12]
 80034ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034b0:	9305      	str	r3, [sp, #20]
 80034b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800357c <_vfiprintf_r+0x220>
 80034b6:	2203      	movs	r2, #3
 80034b8:	4650      	mov	r0, sl
 80034ba:	7821      	ldrb	r1, [r4, #0]
 80034bc:	f000 fb2e 	bl	8003b1c <memchr>
 80034c0:	b138      	cbz	r0, 80034d2 <_vfiprintf_r+0x176>
 80034c2:	2240      	movs	r2, #64	@ 0x40
 80034c4:	9b04      	ldr	r3, [sp, #16]
 80034c6:	eba0 000a 	sub.w	r0, r0, sl
 80034ca:	4082      	lsls	r2, r0
 80034cc:	4313      	orrs	r3, r2
 80034ce:	3401      	adds	r4, #1
 80034d0:	9304      	str	r3, [sp, #16]
 80034d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034d6:	2206      	movs	r2, #6
 80034d8:	4829      	ldr	r0, [pc, #164]	@ (8003580 <_vfiprintf_r+0x224>)
 80034da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034de:	f000 fb1d 	bl	8003b1c <memchr>
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d03f      	beq.n	8003566 <_vfiprintf_r+0x20a>
 80034e6:	4b27      	ldr	r3, [pc, #156]	@ (8003584 <_vfiprintf_r+0x228>)
 80034e8:	bb1b      	cbnz	r3, 8003532 <_vfiprintf_r+0x1d6>
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	3307      	adds	r3, #7
 80034ee:	f023 0307 	bic.w	r3, r3, #7
 80034f2:	3308      	adds	r3, #8
 80034f4:	9303      	str	r3, [sp, #12]
 80034f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034f8:	443b      	add	r3, r7
 80034fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80034fc:	e76a      	b.n	80033d4 <_vfiprintf_r+0x78>
 80034fe:	460c      	mov	r4, r1
 8003500:	2001      	movs	r0, #1
 8003502:	fb0c 3202 	mla	r2, ip, r2, r3
 8003506:	e7a8      	b.n	800345a <_vfiprintf_r+0xfe>
 8003508:	2300      	movs	r3, #0
 800350a:	f04f 0c0a 	mov.w	ip, #10
 800350e:	4619      	mov	r1, r3
 8003510:	3401      	adds	r4, #1
 8003512:	9305      	str	r3, [sp, #20]
 8003514:	4620      	mov	r0, r4
 8003516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800351a:	3a30      	subs	r2, #48	@ 0x30
 800351c:	2a09      	cmp	r2, #9
 800351e:	d903      	bls.n	8003528 <_vfiprintf_r+0x1cc>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0c6      	beq.n	80034b2 <_vfiprintf_r+0x156>
 8003524:	9105      	str	r1, [sp, #20]
 8003526:	e7c4      	b.n	80034b2 <_vfiprintf_r+0x156>
 8003528:	4604      	mov	r4, r0
 800352a:	2301      	movs	r3, #1
 800352c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003530:	e7f0      	b.n	8003514 <_vfiprintf_r+0x1b8>
 8003532:	ab03      	add	r3, sp, #12
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	462a      	mov	r2, r5
 8003538:	4630      	mov	r0, r6
 800353a:	4b13      	ldr	r3, [pc, #76]	@ (8003588 <_vfiprintf_r+0x22c>)
 800353c:	a904      	add	r1, sp, #16
 800353e:	f3af 8000 	nop.w
 8003542:	4607      	mov	r7, r0
 8003544:	1c78      	adds	r0, r7, #1
 8003546:	d1d6      	bne.n	80034f6 <_vfiprintf_r+0x19a>
 8003548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800354a:	07d9      	lsls	r1, r3, #31
 800354c:	d405      	bmi.n	800355a <_vfiprintf_r+0x1fe>
 800354e:	89ab      	ldrh	r3, [r5, #12]
 8003550:	059a      	lsls	r2, r3, #22
 8003552:	d402      	bmi.n	800355a <_vfiprintf_r+0x1fe>
 8003554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003556:	f7ff fde1 	bl	800311c <__retarget_lock_release_recursive>
 800355a:	89ab      	ldrh	r3, [r5, #12]
 800355c:	065b      	lsls	r3, r3, #25
 800355e:	f53f af1f 	bmi.w	80033a0 <_vfiprintf_r+0x44>
 8003562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003564:	e71e      	b.n	80033a4 <_vfiprintf_r+0x48>
 8003566:	ab03      	add	r3, sp, #12
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	462a      	mov	r2, r5
 800356c:	4630      	mov	r0, r6
 800356e:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <_vfiprintf_r+0x22c>)
 8003570:	a904      	add	r1, sp, #16
 8003572:	f000 f87d 	bl	8003670 <_printf_i>
 8003576:	e7e4      	b.n	8003542 <_vfiprintf_r+0x1e6>
 8003578:	08003d90 	.word	0x08003d90
 800357c:	08003d96 	.word	0x08003d96
 8003580:	08003d9a 	.word	0x08003d9a
 8003584:	00000000 	.word	0x00000000
 8003588:	08003337 	.word	0x08003337

0800358c <_printf_common>:
 800358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	4616      	mov	r6, r2
 8003592:	4698      	mov	r8, r3
 8003594:	688a      	ldr	r2, [r1, #8]
 8003596:	690b      	ldr	r3, [r1, #16]
 8003598:	4607      	mov	r7, r0
 800359a:	4293      	cmp	r3, r2
 800359c:	bfb8      	it	lt
 800359e:	4613      	movlt	r3, r2
 80035a0:	6033      	str	r3, [r6, #0]
 80035a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80035a6:	460c      	mov	r4, r1
 80035a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035ac:	b10a      	cbz	r2, 80035b2 <_printf_common+0x26>
 80035ae:	3301      	adds	r3, #1
 80035b0:	6033      	str	r3, [r6, #0]
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	0699      	lsls	r1, r3, #26
 80035b6:	bf42      	ittt	mi
 80035b8:	6833      	ldrmi	r3, [r6, #0]
 80035ba:	3302      	addmi	r3, #2
 80035bc:	6033      	strmi	r3, [r6, #0]
 80035be:	6825      	ldr	r5, [r4, #0]
 80035c0:	f015 0506 	ands.w	r5, r5, #6
 80035c4:	d106      	bne.n	80035d4 <_printf_common+0x48>
 80035c6:	f104 0a19 	add.w	sl, r4, #25
 80035ca:	68e3      	ldr	r3, [r4, #12]
 80035cc:	6832      	ldr	r2, [r6, #0]
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	42ab      	cmp	r3, r5
 80035d2:	dc2b      	bgt.n	800362c <_printf_common+0xa0>
 80035d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	3b00      	subs	r3, #0
 80035dc:	bf18      	it	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	0692      	lsls	r2, r2, #26
 80035e2:	d430      	bmi.n	8003646 <_printf_common+0xba>
 80035e4:	4641      	mov	r1, r8
 80035e6:	4638      	mov	r0, r7
 80035e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035ec:	47c8      	blx	r9
 80035ee:	3001      	adds	r0, #1
 80035f0:	d023      	beq.n	800363a <_printf_common+0xae>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	6922      	ldr	r2, [r4, #16]
 80035f6:	f003 0306 	and.w	r3, r3, #6
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf14      	ite	ne
 80035fe:	2500      	movne	r5, #0
 8003600:	6833      	ldreq	r3, [r6, #0]
 8003602:	f04f 0600 	mov.w	r6, #0
 8003606:	bf08      	it	eq
 8003608:	68e5      	ldreq	r5, [r4, #12]
 800360a:	f104 041a 	add.w	r4, r4, #26
 800360e:	bf08      	it	eq
 8003610:	1aed      	subeq	r5, r5, r3
 8003612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003616:	bf08      	it	eq
 8003618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800361c:	4293      	cmp	r3, r2
 800361e:	bfc4      	itt	gt
 8003620:	1a9b      	subgt	r3, r3, r2
 8003622:	18ed      	addgt	r5, r5, r3
 8003624:	42b5      	cmp	r5, r6
 8003626:	d11a      	bne.n	800365e <_printf_common+0xd2>
 8003628:	2000      	movs	r0, #0
 800362a:	e008      	b.n	800363e <_printf_common+0xb2>
 800362c:	2301      	movs	r3, #1
 800362e:	4652      	mov	r2, sl
 8003630:	4641      	mov	r1, r8
 8003632:	4638      	mov	r0, r7
 8003634:	47c8      	blx	r9
 8003636:	3001      	adds	r0, #1
 8003638:	d103      	bne.n	8003642 <_printf_common+0xb6>
 800363a:	f04f 30ff 	mov.w	r0, #4294967295
 800363e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003642:	3501      	adds	r5, #1
 8003644:	e7c1      	b.n	80035ca <_printf_common+0x3e>
 8003646:	2030      	movs	r0, #48	@ 0x30
 8003648:	18e1      	adds	r1, r4, r3
 800364a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003654:	4422      	add	r2, r4
 8003656:	3302      	adds	r3, #2
 8003658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800365c:	e7c2      	b.n	80035e4 <_printf_common+0x58>
 800365e:	2301      	movs	r3, #1
 8003660:	4622      	mov	r2, r4
 8003662:	4641      	mov	r1, r8
 8003664:	4638      	mov	r0, r7
 8003666:	47c8      	blx	r9
 8003668:	3001      	adds	r0, #1
 800366a:	d0e6      	beq.n	800363a <_printf_common+0xae>
 800366c:	3601      	adds	r6, #1
 800366e:	e7d9      	b.n	8003624 <_printf_common+0x98>

08003670 <_printf_i>:
 8003670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003674:	7e0f      	ldrb	r7, [r1, #24]
 8003676:	4691      	mov	r9, r2
 8003678:	2f78      	cmp	r7, #120	@ 0x78
 800367a:	4680      	mov	r8, r0
 800367c:	460c      	mov	r4, r1
 800367e:	469a      	mov	sl, r3
 8003680:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003686:	d807      	bhi.n	8003698 <_printf_i+0x28>
 8003688:	2f62      	cmp	r7, #98	@ 0x62
 800368a:	d80a      	bhi.n	80036a2 <_printf_i+0x32>
 800368c:	2f00      	cmp	r7, #0
 800368e:	f000 80d2 	beq.w	8003836 <_printf_i+0x1c6>
 8003692:	2f58      	cmp	r7, #88	@ 0x58
 8003694:	f000 80b7 	beq.w	8003806 <_printf_i+0x196>
 8003698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800369c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80036a0:	e03a      	b.n	8003718 <_printf_i+0xa8>
 80036a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80036a6:	2b15      	cmp	r3, #21
 80036a8:	d8f6      	bhi.n	8003698 <_printf_i+0x28>
 80036aa:	a101      	add	r1, pc, #4	@ (adr r1, 80036b0 <_printf_i+0x40>)
 80036ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036b0:	08003709 	.word	0x08003709
 80036b4:	0800371d 	.word	0x0800371d
 80036b8:	08003699 	.word	0x08003699
 80036bc:	08003699 	.word	0x08003699
 80036c0:	08003699 	.word	0x08003699
 80036c4:	08003699 	.word	0x08003699
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	08003699 	.word	0x08003699
 80036d0:	08003699 	.word	0x08003699
 80036d4:	08003699 	.word	0x08003699
 80036d8:	08003699 	.word	0x08003699
 80036dc:	0800381d 	.word	0x0800381d
 80036e0:	08003747 	.word	0x08003747
 80036e4:	080037d3 	.word	0x080037d3
 80036e8:	08003699 	.word	0x08003699
 80036ec:	08003699 	.word	0x08003699
 80036f0:	0800383f 	.word	0x0800383f
 80036f4:	08003699 	.word	0x08003699
 80036f8:	08003747 	.word	0x08003747
 80036fc:	08003699 	.word	0x08003699
 8003700:	08003699 	.word	0x08003699
 8003704:	080037db 	.word	0x080037db
 8003708:	6833      	ldr	r3, [r6, #0]
 800370a:	1d1a      	adds	r2, r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6032      	str	r2, [r6, #0]
 8003710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003718:	2301      	movs	r3, #1
 800371a:	e09d      	b.n	8003858 <_printf_i+0x1e8>
 800371c:	6833      	ldr	r3, [r6, #0]
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	1d19      	adds	r1, r3, #4
 8003722:	6031      	str	r1, [r6, #0]
 8003724:	0606      	lsls	r6, r0, #24
 8003726:	d501      	bpl.n	800372c <_printf_i+0xbc>
 8003728:	681d      	ldr	r5, [r3, #0]
 800372a:	e003      	b.n	8003734 <_printf_i+0xc4>
 800372c:	0645      	lsls	r5, r0, #25
 800372e:	d5fb      	bpl.n	8003728 <_printf_i+0xb8>
 8003730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003734:	2d00      	cmp	r5, #0
 8003736:	da03      	bge.n	8003740 <_printf_i+0xd0>
 8003738:	232d      	movs	r3, #45	@ 0x2d
 800373a:	426d      	negs	r5, r5
 800373c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003740:	230a      	movs	r3, #10
 8003742:	4859      	ldr	r0, [pc, #356]	@ (80038a8 <_printf_i+0x238>)
 8003744:	e010      	b.n	8003768 <_printf_i+0xf8>
 8003746:	6821      	ldr	r1, [r4, #0]
 8003748:	6833      	ldr	r3, [r6, #0]
 800374a:	0608      	lsls	r0, r1, #24
 800374c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003750:	d402      	bmi.n	8003758 <_printf_i+0xe8>
 8003752:	0649      	lsls	r1, r1, #25
 8003754:	bf48      	it	mi
 8003756:	b2ad      	uxthmi	r5, r5
 8003758:	2f6f      	cmp	r7, #111	@ 0x6f
 800375a:	4853      	ldr	r0, [pc, #332]	@ (80038a8 <_printf_i+0x238>)
 800375c:	6033      	str	r3, [r6, #0]
 800375e:	d159      	bne.n	8003814 <_printf_i+0x1a4>
 8003760:	2308      	movs	r3, #8
 8003762:	2100      	movs	r1, #0
 8003764:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003768:	6866      	ldr	r6, [r4, #4]
 800376a:	2e00      	cmp	r6, #0
 800376c:	60a6      	str	r6, [r4, #8]
 800376e:	db05      	blt.n	800377c <_printf_i+0x10c>
 8003770:	6821      	ldr	r1, [r4, #0]
 8003772:	432e      	orrs	r6, r5
 8003774:	f021 0104 	bic.w	r1, r1, #4
 8003778:	6021      	str	r1, [r4, #0]
 800377a:	d04d      	beq.n	8003818 <_printf_i+0x1a8>
 800377c:	4616      	mov	r6, r2
 800377e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003782:	fb03 5711 	mls	r7, r3, r1, r5
 8003786:	5dc7      	ldrb	r7, [r0, r7]
 8003788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800378c:	462f      	mov	r7, r5
 800378e:	42bb      	cmp	r3, r7
 8003790:	460d      	mov	r5, r1
 8003792:	d9f4      	bls.n	800377e <_printf_i+0x10e>
 8003794:	2b08      	cmp	r3, #8
 8003796:	d10b      	bne.n	80037b0 <_printf_i+0x140>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	07df      	lsls	r7, r3, #31
 800379c:	d508      	bpl.n	80037b0 <_printf_i+0x140>
 800379e:	6923      	ldr	r3, [r4, #16]
 80037a0:	6861      	ldr	r1, [r4, #4]
 80037a2:	4299      	cmp	r1, r3
 80037a4:	bfde      	ittt	le
 80037a6:	2330      	movle	r3, #48	@ 0x30
 80037a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037b0:	1b92      	subs	r2, r2, r6
 80037b2:	6122      	str	r2, [r4, #16]
 80037b4:	464b      	mov	r3, r9
 80037b6:	4621      	mov	r1, r4
 80037b8:	4640      	mov	r0, r8
 80037ba:	f8cd a000 	str.w	sl, [sp]
 80037be:	aa03      	add	r2, sp, #12
 80037c0:	f7ff fee4 	bl	800358c <_printf_common>
 80037c4:	3001      	adds	r0, #1
 80037c6:	d14c      	bne.n	8003862 <_printf_i+0x1f2>
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	b004      	add	sp, #16
 80037ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	f043 0320 	orr.w	r3, r3, #32
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	2778      	movs	r7, #120	@ 0x78
 80037dc:	4833      	ldr	r0, [pc, #204]	@ (80038ac <_printf_i+0x23c>)
 80037de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	6831      	ldr	r1, [r6, #0]
 80037e6:	061f      	lsls	r7, r3, #24
 80037e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80037ec:	d402      	bmi.n	80037f4 <_printf_i+0x184>
 80037ee:	065f      	lsls	r7, r3, #25
 80037f0:	bf48      	it	mi
 80037f2:	b2ad      	uxthmi	r5, r5
 80037f4:	6031      	str	r1, [r6, #0]
 80037f6:	07d9      	lsls	r1, r3, #31
 80037f8:	bf44      	itt	mi
 80037fa:	f043 0320 	orrmi.w	r3, r3, #32
 80037fe:	6023      	strmi	r3, [r4, #0]
 8003800:	b11d      	cbz	r5, 800380a <_printf_i+0x19a>
 8003802:	2310      	movs	r3, #16
 8003804:	e7ad      	b.n	8003762 <_printf_i+0xf2>
 8003806:	4828      	ldr	r0, [pc, #160]	@ (80038a8 <_printf_i+0x238>)
 8003808:	e7e9      	b.n	80037de <_printf_i+0x16e>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f023 0320 	bic.w	r3, r3, #32
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	e7f6      	b.n	8003802 <_printf_i+0x192>
 8003814:	230a      	movs	r3, #10
 8003816:	e7a4      	b.n	8003762 <_printf_i+0xf2>
 8003818:	4616      	mov	r6, r2
 800381a:	e7bb      	b.n	8003794 <_printf_i+0x124>
 800381c:	6833      	ldr	r3, [r6, #0]
 800381e:	6825      	ldr	r5, [r4, #0]
 8003820:	1d18      	adds	r0, r3, #4
 8003822:	6961      	ldr	r1, [r4, #20]
 8003824:	6030      	str	r0, [r6, #0]
 8003826:	062e      	lsls	r6, r5, #24
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	d501      	bpl.n	8003830 <_printf_i+0x1c0>
 800382c:	6019      	str	r1, [r3, #0]
 800382e:	e002      	b.n	8003836 <_printf_i+0x1c6>
 8003830:	0668      	lsls	r0, r5, #25
 8003832:	d5fb      	bpl.n	800382c <_printf_i+0x1bc>
 8003834:	8019      	strh	r1, [r3, #0]
 8003836:	2300      	movs	r3, #0
 8003838:	4616      	mov	r6, r2
 800383a:	6123      	str	r3, [r4, #16]
 800383c:	e7ba      	b.n	80037b4 <_printf_i+0x144>
 800383e:	6833      	ldr	r3, [r6, #0]
 8003840:	2100      	movs	r1, #0
 8003842:	1d1a      	adds	r2, r3, #4
 8003844:	6032      	str	r2, [r6, #0]
 8003846:	681e      	ldr	r6, [r3, #0]
 8003848:	6862      	ldr	r2, [r4, #4]
 800384a:	4630      	mov	r0, r6
 800384c:	f000 f966 	bl	8003b1c <memchr>
 8003850:	b108      	cbz	r0, 8003856 <_printf_i+0x1e6>
 8003852:	1b80      	subs	r0, r0, r6
 8003854:	6060      	str	r0, [r4, #4]
 8003856:	6863      	ldr	r3, [r4, #4]
 8003858:	6123      	str	r3, [r4, #16]
 800385a:	2300      	movs	r3, #0
 800385c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003860:	e7a8      	b.n	80037b4 <_printf_i+0x144>
 8003862:	4632      	mov	r2, r6
 8003864:	4649      	mov	r1, r9
 8003866:	4640      	mov	r0, r8
 8003868:	6923      	ldr	r3, [r4, #16]
 800386a:	47d0      	blx	sl
 800386c:	3001      	adds	r0, #1
 800386e:	d0ab      	beq.n	80037c8 <_printf_i+0x158>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	079b      	lsls	r3, r3, #30
 8003874:	d413      	bmi.n	800389e <_printf_i+0x22e>
 8003876:	68e0      	ldr	r0, [r4, #12]
 8003878:	9b03      	ldr	r3, [sp, #12]
 800387a:	4298      	cmp	r0, r3
 800387c:	bfb8      	it	lt
 800387e:	4618      	movlt	r0, r3
 8003880:	e7a4      	b.n	80037cc <_printf_i+0x15c>
 8003882:	2301      	movs	r3, #1
 8003884:	4632      	mov	r2, r6
 8003886:	4649      	mov	r1, r9
 8003888:	4640      	mov	r0, r8
 800388a:	47d0      	blx	sl
 800388c:	3001      	adds	r0, #1
 800388e:	d09b      	beq.n	80037c8 <_printf_i+0x158>
 8003890:	3501      	adds	r5, #1
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	9903      	ldr	r1, [sp, #12]
 8003896:	1a5b      	subs	r3, r3, r1
 8003898:	42ab      	cmp	r3, r5
 800389a:	dcf2      	bgt.n	8003882 <_printf_i+0x212>
 800389c:	e7eb      	b.n	8003876 <_printf_i+0x206>
 800389e:	2500      	movs	r5, #0
 80038a0:	f104 0619 	add.w	r6, r4, #25
 80038a4:	e7f5      	b.n	8003892 <_printf_i+0x222>
 80038a6:	bf00      	nop
 80038a8:	08003da1 	.word	0x08003da1
 80038ac:	08003db2 	.word	0x08003db2

080038b0 <__sflush_r>:
 80038b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	0716      	lsls	r6, r2, #28
 80038b8:	4605      	mov	r5, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	d451      	bmi.n	8003962 <__sflush_r+0xb2>
 80038be:	684b      	ldr	r3, [r1, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dc02      	bgt.n	80038ca <__sflush_r+0x1a>
 80038c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	dd49      	ble.n	800395e <__sflush_r+0xae>
 80038ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038cc:	2e00      	cmp	r6, #0
 80038ce:	d046      	beq.n	800395e <__sflush_r+0xae>
 80038d0:	2300      	movs	r3, #0
 80038d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038d6:	682f      	ldr	r7, [r5, #0]
 80038d8:	602b      	str	r3, [r5, #0]
 80038da:	d031      	beq.n	8003940 <__sflush_r+0x90>
 80038dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	0759      	lsls	r1, r3, #29
 80038e2:	d505      	bpl.n	80038f0 <__sflush_r+0x40>
 80038e4:	6863      	ldr	r3, [r4, #4]
 80038e6:	1ad2      	subs	r2, r2, r3
 80038e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038ea:	b10b      	cbz	r3, 80038f0 <__sflush_r+0x40>
 80038ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038ee:	1ad2      	subs	r2, r2, r3
 80038f0:	2300      	movs	r3, #0
 80038f2:	4628      	mov	r0, r5
 80038f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038f6:	6a21      	ldr	r1, [r4, #32]
 80038f8:	47b0      	blx	r6
 80038fa:	1c42      	adds	r2, r0, #1
 80038fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003900:	d106      	bne.n	8003910 <__sflush_r+0x60>
 8003902:	6829      	ldr	r1, [r5, #0]
 8003904:	291d      	cmp	r1, #29
 8003906:	d845      	bhi.n	8003994 <__sflush_r+0xe4>
 8003908:	4a27      	ldr	r2, [pc, #156]	@ (80039a8 <__sflush_r+0xf8>)
 800390a:	40ca      	lsrs	r2, r1
 800390c:	07d6      	lsls	r6, r2, #31
 800390e:	d541      	bpl.n	8003994 <__sflush_r+0xe4>
 8003910:	2200      	movs	r2, #0
 8003912:	6062      	str	r2, [r4, #4]
 8003914:	6922      	ldr	r2, [r4, #16]
 8003916:	04d9      	lsls	r1, r3, #19
 8003918:	6022      	str	r2, [r4, #0]
 800391a:	d504      	bpl.n	8003926 <__sflush_r+0x76>
 800391c:	1c42      	adds	r2, r0, #1
 800391e:	d101      	bne.n	8003924 <__sflush_r+0x74>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b903      	cbnz	r3, 8003926 <__sflush_r+0x76>
 8003924:	6560      	str	r0, [r4, #84]	@ 0x54
 8003926:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003928:	602f      	str	r7, [r5, #0]
 800392a:	b1c1      	cbz	r1, 800395e <__sflush_r+0xae>
 800392c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003930:	4299      	cmp	r1, r3
 8003932:	d002      	beq.n	800393a <__sflush_r+0x8a>
 8003934:	4628      	mov	r0, r5
 8003936:	f7ff fbf3 	bl	8003120 <_free_r>
 800393a:	2300      	movs	r3, #0
 800393c:	6363      	str	r3, [r4, #52]	@ 0x34
 800393e:	e00e      	b.n	800395e <__sflush_r+0xae>
 8003940:	2301      	movs	r3, #1
 8003942:	4628      	mov	r0, r5
 8003944:	6a21      	ldr	r1, [r4, #32]
 8003946:	47b0      	blx	r6
 8003948:	4602      	mov	r2, r0
 800394a:	1c50      	adds	r0, r2, #1
 800394c:	d1c7      	bne.n	80038de <__sflush_r+0x2e>
 800394e:	682b      	ldr	r3, [r5, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0c4      	beq.n	80038de <__sflush_r+0x2e>
 8003954:	2b1d      	cmp	r3, #29
 8003956:	d001      	beq.n	800395c <__sflush_r+0xac>
 8003958:	2b16      	cmp	r3, #22
 800395a:	d119      	bne.n	8003990 <__sflush_r+0xe0>
 800395c:	602f      	str	r7, [r5, #0]
 800395e:	2000      	movs	r0, #0
 8003960:	e01d      	b.n	800399e <__sflush_r+0xee>
 8003962:	690f      	ldr	r7, [r1, #16]
 8003964:	2f00      	cmp	r7, #0
 8003966:	d0fa      	beq.n	800395e <__sflush_r+0xae>
 8003968:	0793      	lsls	r3, r2, #30
 800396a:	bf18      	it	ne
 800396c:	2300      	movne	r3, #0
 800396e:	680e      	ldr	r6, [r1, #0]
 8003970:	bf08      	it	eq
 8003972:	694b      	ldreq	r3, [r1, #20]
 8003974:	1bf6      	subs	r6, r6, r7
 8003976:	600f      	str	r7, [r1, #0]
 8003978:	608b      	str	r3, [r1, #8]
 800397a:	2e00      	cmp	r6, #0
 800397c:	ddef      	ble.n	800395e <__sflush_r+0xae>
 800397e:	4633      	mov	r3, r6
 8003980:	463a      	mov	r2, r7
 8003982:	4628      	mov	r0, r5
 8003984:	6a21      	ldr	r1, [r4, #32]
 8003986:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800398a:	47e0      	blx	ip
 800398c:	2800      	cmp	r0, #0
 800398e:	dc07      	bgt.n	80039a0 <__sflush_r+0xf0>
 8003990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800399c:	81a3      	strh	r3, [r4, #12]
 800399e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a0:	4407      	add	r7, r0
 80039a2:	1a36      	subs	r6, r6, r0
 80039a4:	e7e9      	b.n	800397a <__sflush_r+0xca>
 80039a6:	bf00      	nop
 80039a8:	20400001 	.word	0x20400001

080039ac <_fflush_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	690b      	ldr	r3, [r1, #16]
 80039b0:	4605      	mov	r5, r0
 80039b2:	460c      	mov	r4, r1
 80039b4:	b913      	cbnz	r3, 80039bc <_fflush_r+0x10>
 80039b6:	2500      	movs	r5, #0
 80039b8:	4628      	mov	r0, r5
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	b118      	cbz	r0, 80039c6 <_fflush_r+0x1a>
 80039be:	6a03      	ldr	r3, [r0, #32]
 80039c0:	b90b      	cbnz	r3, 80039c6 <_fflush_r+0x1a>
 80039c2:	f7ff f9b5 	bl	8002d30 <__sinit>
 80039c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f3      	beq.n	80039b6 <_fflush_r+0xa>
 80039ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039d0:	07d0      	lsls	r0, r2, #31
 80039d2:	d404      	bmi.n	80039de <_fflush_r+0x32>
 80039d4:	0599      	lsls	r1, r3, #22
 80039d6:	d402      	bmi.n	80039de <_fflush_r+0x32>
 80039d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039da:	f7ff fb9e 	bl	800311a <__retarget_lock_acquire_recursive>
 80039de:	4628      	mov	r0, r5
 80039e0:	4621      	mov	r1, r4
 80039e2:	f7ff ff65 	bl	80038b0 <__sflush_r>
 80039e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039e8:	4605      	mov	r5, r0
 80039ea:	07da      	lsls	r2, r3, #31
 80039ec:	d4e4      	bmi.n	80039b8 <_fflush_r+0xc>
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	059b      	lsls	r3, r3, #22
 80039f2:	d4e1      	bmi.n	80039b8 <_fflush_r+0xc>
 80039f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039f6:	f7ff fb91 	bl	800311c <__retarget_lock_release_recursive>
 80039fa:	e7dd      	b.n	80039b8 <_fflush_r+0xc>

080039fc <__swhatbuf_r>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	460c      	mov	r4, r1
 8003a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a04:	4615      	mov	r5, r2
 8003a06:	2900      	cmp	r1, #0
 8003a08:	461e      	mov	r6, r3
 8003a0a:	b096      	sub	sp, #88	@ 0x58
 8003a0c:	da0a      	bge.n	8003a24 <__swhatbuf_r+0x28>
 8003a0e:	89a1      	ldrh	r1, [r4, #12]
 8003a10:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8003a14:	d113      	bne.n	8003a3e <__swhatbuf_r+0x42>
 8003a16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	6031      	str	r1, [r6, #0]
 8003a1e:	602a      	str	r2, [r5, #0]
 8003a20:	b016      	add	sp, #88	@ 0x58
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	466a      	mov	r2, sp
 8003a26:	f000 f847 	bl	8003ab8 <_fstat_r>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	dbef      	blt.n	8003a0e <__swhatbuf_r+0x12>
 8003a2e:	9901      	ldr	r1, [sp, #4]
 8003a30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a38:	4259      	negs	r1, r3
 8003a3a:	4159      	adcs	r1, r3
 8003a3c:	e7eb      	b.n	8003a16 <__swhatbuf_r+0x1a>
 8003a3e:	2100      	movs	r1, #0
 8003a40:	2240      	movs	r2, #64	@ 0x40
 8003a42:	e7ea      	b.n	8003a1a <__swhatbuf_r+0x1e>

08003a44 <__smakebuf_r>:
 8003a44:	898b      	ldrh	r3, [r1, #12]
 8003a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a48:	079e      	lsls	r6, r3, #30
 8003a4a:	4605      	mov	r5, r0
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	d507      	bpl.n	8003a60 <__smakebuf_r+0x1c>
 8003a50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	6123      	str	r3, [r4, #16]
 8003a58:	2301      	movs	r3, #1
 8003a5a:	6163      	str	r3, [r4, #20]
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	ab01      	add	r3, sp, #4
 8003a62:	466a      	mov	r2, sp
 8003a64:	f7ff ffca 	bl	80039fc <__swhatbuf_r>
 8003a68:	9e00      	ldr	r6, [sp, #0]
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	4631      	mov	r1, r6
 8003a6e:	f7ff fbc1 	bl	80031f4 <_malloc_r>
 8003a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a76:	b938      	cbnz	r0, 8003a88 <__smakebuf_r+0x44>
 8003a78:	059a      	lsls	r2, r3, #22
 8003a7a:	d4ef      	bmi.n	8003a5c <__smakebuf_r+0x18>
 8003a7c:	f023 0303 	bic.w	r3, r3, #3
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	81a3      	strh	r3, [r4, #12]
 8003a86:	e7e3      	b.n	8003a50 <__smakebuf_r+0xc>
 8003a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a8c:	81a3      	strh	r3, [r4, #12]
 8003a8e:	9b01      	ldr	r3, [sp, #4]
 8003a90:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8003a94:	6020      	str	r0, [r4, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0e0      	beq.n	8003a5c <__smakebuf_r+0x18>
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aa0:	f000 f81c 	bl	8003adc <_isatty_r>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d0d9      	beq.n	8003a5c <__smakebuf_r+0x18>
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	81a3      	strh	r3, [r4, #12]
 8003ab4:	e7d2      	b.n	8003a5c <__smakebuf_r+0x18>
	...

08003ab8 <_fstat_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	2300      	movs	r3, #0
 8003abc:	4d06      	ldr	r5, [pc, #24]	@ (8003ad8 <_fstat_r+0x20>)
 8003abe:	4604      	mov	r4, r0
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	f7fe fff2 	bl	8002aae <_fstat>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d102      	bne.n	8003ad4 <_fstat_r+0x1c>
 8003ace:	682b      	ldr	r3, [r5, #0]
 8003ad0:	b103      	cbz	r3, 8003ad4 <_fstat_r+0x1c>
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	bd38      	pop	{r3, r4, r5, pc}
 8003ad6:	bf00      	nop
 8003ad8:	2000027c 	.word	0x2000027c

08003adc <_isatty_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	2300      	movs	r3, #0
 8003ae0:	4d05      	ldr	r5, [pc, #20]	@ (8003af8 <_isatty_r+0x1c>)
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	f7fe ffe6 	bl	8002ab8 <_isatty>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_isatty_r+0x1a>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_isatty_r+0x1a>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	2000027c 	.word	0x2000027c

08003afc <_sbrk_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	2300      	movs	r3, #0
 8003b00:	4d05      	ldr	r5, [pc, #20]	@ (8003b18 <_sbrk_r+0x1c>)
 8003b02:	4604      	mov	r4, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	f7fe ffda 	bl	8002ac0 <_sbrk>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_sbrk_r+0x1a>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_sbrk_r+0x1a>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	2000027c 	.word	0x2000027c

08003b1c <memchr>:
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	b2c9      	uxtb	r1, r1
 8003b22:	4402      	add	r2, r0
 8003b24:	4293      	cmp	r3, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	d101      	bne.n	8003b2e <memchr+0x12>
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	e003      	b.n	8003b36 <memchr+0x1a>
 8003b2e:	7804      	ldrb	r4, [r0, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	428c      	cmp	r4, r1
 8003b34:	d1f6      	bne.n	8003b24 <memchr+0x8>
 8003b36:	bd10      	pop	{r4, pc}

08003b38 <_init>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr

08003b44 <_fini>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr
